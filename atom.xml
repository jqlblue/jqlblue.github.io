<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Soulink</title>
  
  <subtitle>Code the Self, Connect the Soul.</subtitle>
  <link href="https://blog.gaoyuan.xyz/atom.xml" rel="self"/>
  
  <link href="https://blog.gaoyuan.xyz/"/>
  <updated>2025-09-20T06:22:41.924Z</updated>
  <id>https://blog.gaoyuan.xyz/</id>
  
  <author>
    <name>GaoYuan</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从nginx+fpm迁移到frankenphp</title>
    <link href="https://blog.gaoyuan.xyz/2025/09/20/from-nginx-fpm-to-frankenphp/"/>
    <id>https://blog.gaoyuan.xyz/2025/09/20/from-nginx-fpm-to-frankenphp/</id>
    <published>2025-09-20T03:52:49.000Z</published>
    <updated>2025-09-20T06:22:41.924Z</updated>
    
    <content type="html"><![CDATA[<p>FrankenPHP 是一个把 PHP 解释器“装进”Caddy 的现代应用服务器：一个进程同时干 TLS&#x2F;HTTP&#x2F;3、静态资源和 PHP 执行，还支持 103 Early Hints、内置实时推送（Mercure）、以及常驻内存的 Worker 模式来降低延迟。<br>通俗点说，它把“Nginx + PHP-FPM + 一堆插件”合成了all in one for php web develop。</p><span id="more"></span><p>2025 年 5–6 月，FrankenPHP 获得 PHP 基金会 的“官方支持”，项目代码迁入 PHP 在 GitHub 的官方组织，方便核心贡献者参与、提升长期可持续性。不过日常维护仍由原作者和维护团队负责。</p><p>这意味着社区层面把“现代 PHP 的官方应用服务器路线”摆上了台面：更简单的部署形态（Docker&#x2F;单文件）、更好的开箱体验（HTTP&#x2F;3、自动 HTTPS）、以及面向高并发的 Worker 模式，都会得到长期投入与生态协同。</p><p>想象把「Nginx + PHP-FPM + 证书管理 + 实时推送」塞进一个更省事的“全能小机箱”里，这就是 FrankenPHP：</p><pre><code>它把 PHP 解释器嵌进 Caddy Web 服务器，一个进程就能完成 HTTPS/HTTP/3、静态资源、以及 PHP 执行。</code></pre><p>结果是：</p><pre><code>部署更简单、首屏更快、并发更稳。&#39;</code></pre><h2 id="FrankenPHP-的核心功能与优势"><a href="#FrankenPHP-的核心功能与优势" class="headerlink" title="FrankenPHP 的核心功能与优势"></a>FrankenPHP 的核心功能与优势</h2><h3 id="1-一体化：一个进程搞定-Web-PHP"><a href="#1-一体化：一个进程搞定-Web-PHP" class="headerlink" title="1) 一体化：一个进程搞定 Web + PHP"></a>1) 一体化：一个进程搞定 Web + PHP</h3><pre><code>内置 Caddy：自带自动 HTTPS、HTTP/2/HTTP/3、反代与静态资源；配置用 Caddyfile，语法直白。少一层跳转：不用再 Nginx → php-fpm 走 FastCGI，减少链路复杂度与运维成本。</code></pre><h3 id="2-Worker-模式：把框架“常驻内存”，降低每次冷启动"><a href="#2-Worker-模式：把框架“常驻内存”，降低每次冷启动" class="headerlink" title="2) Worker 模式：把框架“常驻内存”，降低每次冷启动"></a>2) Worker 模式：把框架“常驻内存”，降低每次冷启动</h3><pre><code>传统 FPM 每个请求都要重新引导框架；Worker 模式让应用常驻内存，请求复用已初始化的容器与依赖，延迟更低、吞吐更高。Laravel、Symfony、Yii 都已提供官方集成或适配。</code></pre><blockquote><p>注意点：避免静态变量、单例在请求间泄漏状态，必要时做“请求后重置”。</p></blockquote><h3 id="3-103-Early-Hints：让首屏更快“动起来”"><a href="#3-103-Early-Hints：让首屏更快“动起来”" class="headerlink" title="3) 103 Early Hints：让首屏更快“动起来”"></a>3) 103 Early Hints：让首屏更快“动起来”</h3><pre><code>支持 HTTP 103 Early Hints：后端慢查询还在跑时，先把 CSS/JS 的预加载提示发给浏览器，页面更早渲染。官方称可带来最高约 30% 的加载改进（视页面而定）。</code></pre><h3 id="4-内置-Mercure：零-SDK-的实时推送（SSE）"><a href="#4-内置-Mercure：零-SDK-的实时推送（SSE）" class="headerlink" title="4) 内置 Mercure：零 SDK 的实时推送（SSE）"></a>4) 内置 Mercure：零 SDK 的实时推送（SSE）</h3><pre><code>开箱就有 Mercure Hub：后端发布消息，前端通过 Server-Sent Events 直接收到，无需自己搭 WebSocket 服务或写额外 JS SDK。适合内容更新、系统通知、仪表盘等“轻实时”场景。</code></pre><h3 id="5-单文件分发：把“PHP-Caddy-你的应用”打包成一个可执行文件"><a href="#5-单文件分发：把“PHP-Caddy-你的应用”打包成一个可执行文件" class="headerlink" title="5) 单文件分发：把“PHP + Caddy + 你的应用”打包成一个可执行文件"></a>5) 单文件分发：把“PHP + Caddy + 你的应用”打包成一个可执行文件</h3><pre><code>借助 static-php-cli，可以做“静态/几乎静态”构建，生成一个可执行文件：带 PHP 解释器、Caddy、以及你的代码与资源。用处：边缘节点、无容器环境、内网灰度、离线分发、CI/CD 工件更简洁。</code></pre><h3 id="6-简化的配置与扩展"><a href="#6-简化的配置与扩展" class="headerlink" title="6) 简化的配置与扩展"></a>6) 简化的配置与扩展</h3><pre><code>Caddyfile 就能完成站点、TLS、静态资源缓存、Header 安全策略等常见需求。需要更多 Caddy 模块？可用 xcaddy 自定义构建，把想要的插件一起编进来。</code></pre><h2 id="安装与启动-FrankenPHP"><a href="#安装与启动-FrankenPHP" class="headerlink" title="安装与启动 FrankenPHP"></a>安装与启动 FrankenPHP</h2><h3 id="Docker（最快上手，适合本地-生产）"><a href="#Docker（最快上手，适合本地-生产）" class="headerlink" title="Docker（最快上手，适合本地&#x2F;生产）"></a>Docker（最快上手，适合本地&#x2F;生产）</h3><p>官方镜像同时提供 Debian&#x2F;Alpine、PHP 8.2&#x2F;8.3&#x2F;8.4 多版本。</p><p>一行命令即可<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $PWD:/app/public \</span><br><span class="line">-p 80:80 -p 443:443 -p 443:443/udp \</span><br><span class="line">dunglas/frankenphp</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="从源码编译（可定制、推荐常规自建）"><a href="#从源码编译（可定制、推荐常规自建）" class="headerlink" title="从源码编译（可定制、推荐常规自建）"></a>从源码编译（可定制、推荐常规自建）</h3><p>需要自己控制 PHP 版本&#x2F;扩展&#x2F;构建参数；“动态 PHP 库 + FrankenPHP”是推荐方式。</p><p>具体方式可参见官网链接 <a href="https://frankenphp.dev/docs/compile/">Compile From Sources</a>.</p><h3 id="静态-单文件构建"><a href="#静态-单文件构建" class="headerlink" title="静态&#x2F;单文件构建"></a>静态&#x2F;单文件构建</h3><p>把 PHP 解释器 + Caddy + FrankenPHP（以及你的应用）打成“一个可执行文件”；<br>可用于内网、边缘、离线环境分发。</p><blockquote><p>将php业务代码打包进静态可执行文件，虽然看起来不用交付业务php代码，但是并不能起到保护业务代码的作用。<br>包含了php业务代码的静态可执行文件，在运行时，会将业务代码解压到服务器，在服务器上就可以直接提取业务代码。</p></blockquote><p>构建方式可参见官网链接 <a href="https://frankenphp.dev/docs/static/">Create a Static Build</a>.</p><h3 id="FrankenPHP常用命令"><a href="#FrankenPHP常用命令" class="headerlink" title="FrankenPHP常用命令"></a>FrankenPHP常用命令</h3><h4 id="frankenphp-php-server"><a href="#frankenphp-php-server" class="headerlink" title="frankenphp php-server"></a>frankenphp php-server</h4><p>用于“开箱即跑”的最小化场景；可叠加 Worker、热重载等选项。不读取 Caddyfile。<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">直接在当前目录提供站点（默认根目录 public/）</span><br><span class="line">frankenphp php-server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">启用 Worker（常驻内存）</span><br><span class="line">frankenphp php-server --worker /path/to/worker.php</span><br><span class="line"></span><br><span class="line">监听代码变更（glob 支持），自动重启 worker</span><br><span class="line">frankenphp php-server --worker /path/to/worker.php --watch=&quot;/app/**/*.php&quot;</span><br><span class="line"></span><br><span class="line">（可选）开发期开启本地 HTTPS/HTTP2/HTTP3</span><br><span class="line">frankenphp php-server --https --http-redirect</span><br></pre></td></tr></table></figure></p><h4 id="frankenphp-run"><a href="#frankenphp-run" class="headerlink" title="frankenphp run"></a>frankenphp run</h4><p>用于生产&#x2F;自定义配置，读取 Caddyfile；支持 -c&#x2F;–config 指定路径。<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在当前目录寻找 Caddyfile（静态二进制也会按此规则查找）</span><br><span class="line">frankenphp run</span><br><span class="line"></span><br><span class="line">显式指定 Caddyfile</span><br><span class="line">frankenphp run -c /etc/frankenphp/Caddyfile</span><br></pre></td></tr></table></figure></p><h4 id="frankenphp-php-cli"><a href="#frankenphp-php-cli" class="headerlink" title="frankenphp php-cli"></a>frankenphp php-cli</h4><p>执行单次 CLI 脚本（等价“php your.php”，但走 FrankenPHP 自带的 PHP）。<br>    <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frankenphp php-cli /path/to/script.php</span><br></pre></td></tr></table></figure></p><h4 id="frankenphp-reload"><a href="#frankenphp-reload" class="headerlink" title="frankenphp reload"></a>frankenphp reload</h4><p>仅重载 Caddy 配置（不等同于重启 Worker 逻辑）。适合你修改了 Caddyfile 想无缝应用配置。</p><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如容器内重载 Caddy 配置</span><br><span class="line">frankenphp reload -c /etc/frankenphp/Caddyfile</span><br></pre></td></tr></table></figure></code></pre><h2 id="FrankenPHP-配置清单"><a href="#FrankenPHP-配置清单" class="headerlink" title="FrankenPHP 配置清单"></a>FrankenPHP 配置清单</h2><h3 id="Caddyfile"><a href="#Caddyfile" class="headerlink" title="Caddyfile"></a>Caddyfile</h3><p>Caddyfile告诉 FrankenPHP 如何对外提供服务（域名、端口、TLS、静态资源、路由到 PHP、压缩、日志、安全头、Worker 等）。</p><p>Caddyfile在Docker 镜像里通常的路径是 &#x2F;etc&#x2F;frankenphp&#x2F;Caddyfile，独立二进制默认找当前工作目录（可 -c 指定）。</p><h4 id="Caddyfile-常用配置"><a href="#Caddyfile-常用配置" class="headerlink" title="Caddyfile 常用配置"></a>Caddyfile 常用配置</h4><pre><code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">example.com &#123; ... &#125;：定义一个站点（可写多个）。</span><br><span class="line"></span><br><span class="line">root * /app/public：站点根目录（通常指向 public/）。</span><br><span class="line"></span><br><span class="line">encode zstd br gzip：开启压缩，减小传输体积。</span><br><span class="line"></span><br><span class="line">php_server &#123; ... &#125;：一条指令搞定“重写到 index.php + 执行 PHP + 静态文件”，日常首选。</span><br><span class="line"></span><br><span class="line">env KEY VAL：给 PHP 传入环境变量（仅该站点）。</span><br><span class="line"></span><br><span class="line">worker &#123; file index.php; num 4; &#125;：为该站点启用 Worker（常驻内存），提升吞吐/降低 TTFB。</span><br><span class="line"></span><br><span class="line">file_server：提供静态文件（可配长缓存）。</span><br><span class="line"></span><br><span class="line">header &#123; ... &#125;：加安全响应头（HSTS、CSP、X-Frame-Options 等）。</span><br><span class="line"></span><br><span class="line">log &#123; ... &#125;：访问日志（输出位置、格式、筛选）。</span><br><span class="line"></span><br><span class="line">@assets &#123; … &#125; + handle @assets &#123; … &#125;：匹配静态资源并设置缓存头。</span><br><span class="line"></span><br><span class="line">全局块 &#123; frankenphp &#123; … &#125; &#125;：引擎层配置（如 php_ini memory_limit 256M、全局 worker、线程数等）。</span><br></pre></td></tr></table></figure></code></pre><h4 id="Caddyfile-示例配置"><a href="#Caddyfile-示例配置" class="headerlink" title="Caddyfile 示例配置"></a>Caddyfile 示例配置</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    auto_https off</span><br><span class="line">    # 全局设置</span><br><span class="line">    http_port 80</span><br><span class="line">    auto_https disable_redirects</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.test.net:80 &#123;</span><br><span class="line">    root /home/project/public</span><br><span class="line">    # 日志</span><br><span class="line">    log &#123;</span><br><span class="line">        output file /var/log/frankenphp-access.log</span><br><span class="line">        format json</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # 自定义 Header</span><br><span class="line">    # header &#123;</span><br><span class="line">    #     X-Frame-Options &quot;DENY&quot;</span><br><span class="line">    #     X-Content-Type-Options &quot;nosniff&quot;</span><br><span class="line">    # &#125;</span><br><span class="line"></span><br><span class="line">    try_files &#123;path&#125; &#123;path&#125;/ /bootstrap.php?&#123;query&#125;</span><br><span class="line"></span><br><span class="line">    php_server &#123;</span><br><span class="line">        root /homeh/project/public/ # 允许更好的缓存</span><br><span class="line">        env run_mode &quot;development&quot;</span><br><span class="line">        env REQUEST_PROJECT &quot;Account&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="PHP-配置（php-ini-与扩展）"><a href="#PHP-配置（php-ini-与扩展）" class="headerlink" title="PHP 配置（php.ini 与扩展）"></a>PHP 配置（php.ini 与扩展）</h3><p>配置 PHP 运行时的资源限制、功能开关、扩展加载等（与 Web 服务器无关，影响 CLI&#x2F;Worker&#x2F;请求处理本身）。</p><p>文件位置常见：Docker 下 &#x2F;usr&#x2F;local&#x2F;etc&#x2F;php&#x2F;php.ini（可从模板复制）。</p><p>独立二进制优先读当前目录或 &#x2F;etc&#x2F;frankenphp&#x2F;php.ini。</p><blockquote><p>静态二进制所需扩展需构建时集成。</p></blockquote><h3 id="FrankenPHP-常用环境变量"><a href="#FrankenPHP-常用环境变量" class="headerlink" title="FrankenPHP 常用环境变量"></a>FrankenPHP 常用环境变量</h3><p>SERVER_NAME</p><pre><code>设定监听地址与主机名；这些主机名也会用于自动签发的证书。用法：SERVER_NAME=&quot;localhost&quot;（本地 HTTPS），或 SERVER_NAME=&quot;:80&quot;（只开 80 端口，常用于前面已有反代/证书时）。</code></pre><p>SERVER_ROOT</p><pre><code>设置站点根目录，默认是 public/。用法：SERVER_ROOT=&quot;/app/public&quot;。</code></pre><p>CADDY_GLOBAL_OPTIONS</p><pre><code>向 Caddyfile 的全局块注入配置（无须改 Caddyfile）。例：启用调试 CADDY_GLOBAL_OPTIONS=&quot;debug&quot;；或开启 HTTP/1 全双工：CADDY_GLOBAL_OPTIONS=&#39;servers &#123; enable_full_duplex &#125;&#39;。</code></pre><p>FRANKENPHP_CONFIG</p><pre><code>向全局 frankenphp &#123; … &#125; 指令块注入 FrankenPHP 配置（比如 Worker）。例：FRANKENPHP_CONFIG=&#39;worker /app/public/index.php 4&#39;。也可配合默认模板把多行片段注入。</code></pre><p>PHP_INI_SCAN_DIR</p><pre><code>追加加载的 *.ini 目录（PHP 自带能力），便于把自定义 php.ini 片段随容器/环境注入。</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -v $PWD:/app \</span><br><span class="line">  -e SERVER_NAME=&quot;:80&quot; \</span><br><span class="line">  -e SERVER_ROOT=&quot;/app/public&quot; \</span><br><span class="line">  -e CADDY_GLOBAL_OPTIONS=&quot;debug&quot; \</span><br><span class="line">  -e FRANKENPHP_CONFIG=&quot;worker /app/public/index.php 4&quot; \</span><br><span class="line">  -p 80:80 -p 443:443 -p 443:443/udp \</span><br><span class="line">  dunglas/frankenphp</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Worker-模式"><a href="#Worker-模式" class="headerlink" title="Worker 模式"></a>Worker 模式</h3><p>Worker 模式让框架常驻内存，显著降低 TTFB&#x2F;CPU 抖动。两种写法：</p><h4 id="全局块-Worker："><a href="#全局块-Worker：" class="headerlink" title="全局块 Worker："></a>全局块 Worker：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  frankenphp &#123;</span><br><span class="line">    worker &#123;</span><br><span class="line">      file /app/public/index.php</span><br><span class="line">      num 4                     # worker 数，按核数调</span><br><span class="line">      env APP_ENV production</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="直接在站点里："><a href="#直接在站点里：" class="headerlink" title="直接在站点里："></a>直接在站点里：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">example.com &#123;</span><br><span class="line">  root * /app/public</span><br><span class="line">  php_server &#123;</span><br><span class="line">    worker index.php 4         # 指定 worker 与并发数</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用 Caddy admin 后，通过POST &#x2F;frankenphp&#x2F;workers&#x2F;restart 可优雅重启全部 worker。<br>也可在开发期用 –watch 自动重启。</p><p>reference：</p><p>[^1] <a href="https://frankenphp.dev/docs/">https://frankenphp.dev/docs/</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;FrankenPHP 是一个把 PHP 解释器“装进”Caddy 的现代应用服务器：一个进程同时干 TLS&amp;#x2F;HTTP&amp;#x2F;3、静态资源和 PHP 执行，还支持 103 Early Hints、内置实时推送（Mercure）、以及常驻内存的 Worker 模式来降低延迟。&lt;br&gt;通俗点说，它把“Nginx + PHP-FPM + 一堆插件”合成了all in one for php web develop。&lt;/p&gt;</summary>
    
    
    
    <category term="php" scheme="https://blog.gaoyuan.xyz/categories/php/"/>
    
    
    <category term="php" scheme="https://blog.gaoyuan.xyz/tags/php/"/>
    
    <category term="Caddy" scheme="https://blog.gaoyuan.xyz/tags/Caddy/"/>
    
    <category term="nginx" scheme="https://blog.gaoyuan.xyz/tags/nginx/"/>
    
    <category term="fpm" scheme="https://blog.gaoyuan.xyz/tags/fpm/"/>
    
    <category term="frankenphp" scheme="https://blog.gaoyuan.xyz/tags/frankenphp/"/>
    
  </entry>
  
  <entry>
    <title>亲爱的小孩，让我看见真正的你</title>
    <link href="https://blog.gaoyuan.xyz/2025/07/02/Dear-child-let-me-see-the-real-you/"/>
    <id>https://blog.gaoyuan.xyz/2025/07/02/Dear-child-let-me-see-the-real-you/</id>
    <published>2025-07-02T08:03:51.000Z</published>
    <updated>2025-07-02T08:33:44.159Z</updated>
    
    <content type="html"><![CDATA[<p>有些时候，是不是你也会这样？</p><p>在某个深夜里，看着小孩熟睡的样子，内心会涌起直达心房最深处的莫名感动。抑或在想：在他小小的身躯里，到底藏着多少我们不能读懂的心事？他微微皱起的眉头，是不是要在睡梦中努力让我们明白些什么？</p><img src="/images/soulens-kid-1/soulens-kid-1.jpg" class="" title="soulink 亲爱的小孩，让我看见真正的你"><p>我们常常以为自己了解孩子——了解他们的喜好、他们的性格、他们的梦想。但真正的了解，不是靠填问卷，不是靠习题本，也不是靠成绩单。</p><p>真正的了解，是在他们不说话的时候，仍然能感受到：他是不是累了？他是不是被误解了？他是不是，其实只是在找一个被看见的方式。</p><pre><code>我们以为我们知道，但其实我们常常只能看到表象。</code></pre><img src="/images/soulens-kid-1/soulens-kid-2.jpg" class="" title="soulink 亲爱的小孩，让我看见真正的你"><p>不知道你有没有经历过这些瞬间？</p><blockquote><p>你问他：“今天在学校里过得怎么样？”他只是漫不经心地回道：“就那样。”<br>他一边摔门一边说大喊：“别管我！”<br>你送上他最喜欢的点心，他却一点都不开心。</p></blockquote><p>你想去靠近他，但却不知道从哪里开始。你用尽浑身解数，可他却越来越沉默，越来越退缩。你甚至开始怀疑：是不是自己做错了什么？</p><p>其实，没有人天生就会做父母。我们只是在用尽全力去守护一个人，哪怕我们还不完全懂他。</p><img src="/images/soulens-kid-1/soulens-kid-3.jpg" class="" title="soulink 亲爱的小孩，让我看见真正的你"><pre><code>小孩的回应，不一定要用语言来表达。</code></pre><p>每个孩子都有专属自己的“表达密码”。</p><p>有些孩子，总是在话语里绕圈圈，你问东他答西，不是他故意回避，而是他不知道怎么说出自己真正的情绪。</p><p>有些孩子，安静的时候像猫一样，但当你忽略他时，他心里却早已像打翻的五味料瓶。</p><p>还有的孩子，总在课堂上“分神”，老师说他不专注，可他可能只是把注意力放在了更让他感兴趣的事情上。</p><p>这些时刻，我们多么希望能有一把钥匙，打开通向孩子内心的门。</p><pre><code>有没有什么方法，可以让我们更多一点了解自己的孩子？</code></pre><p>不用专业术语，不用复杂概念，只用生活化的语言，去讲述孩子的特质、表达方式、情绪处理习惯、甚至是他们内心最深处的渴望。</p><p>或许，<em>Soulens</em> 就是这样一款App。</p><img src="/images/soulens-kid-1/soulens-app-1.jpg" class="" title="soulink soulens app"><p>在Soulens 中有这样一个模块，可以生成一份生活化的解读报告。帮助我们以全新的视角看待自己的孩子。</p><img src="/images/soulens-kid-1/soulens-app-2.jpg" class="" title="soulink soulens app"><img src="/images/soulens-kid-1/soulens-app-3.jpg" class="" title="soulink soulens app"><p>这不是一份教育指南，而是一面镜子。</p><p>这不是一个改变孩子的工具，而是一个理解孩子的窗口。</p><p>这个功能，也许不能回答我们的所有问题，但如果能让我们跳出原有视角，从其他维度多了解一点自己的小孩，当他们在难过时或许会少一点责备，当他们在兴奋时可能就能会多一点理解，那这样就已经足够。</p><p>当我们放下”应该”的标准，当我们卸下”最好”的包袱， 当我们愿意以好奇和开放的心态去了解，我们就能看见孩子最真实的样子。</p><p>每个孩子都是一个独特的宇宙，带着独属于自己的光芒，等待着被我们去发现，去真正被看见。</p><p>现在，让我们一起在Soulens中开启这段旅程。让我们重新认识自己的孩子，让我们重新定义亲子关系，让开心和快乐，可以伴随在每个孩子的左右。</p><p>IOS版本在美区应用市场已开启下载，体验地址 <a href="https://apps.apple.com/us/app/soulens/id6476761627">https://apps.apple.com/us/app/soulens/id6476761627</a></p>]]></content>
    
    
    <summary type="html">有没有什么方法，可以让我们更多一点了解自己的孩子? 不用专业术语，不用复杂概念，只用生活化的语言，去讲述孩子的特质、表达方式、情绪处理习惯、甚至是他们内心最深处的渴望。或许，Soulens 就是这样一款App</summary>
    
    
    
    <category term="metaphysics" scheme="https://blog.gaoyuan.xyz/categories/metaphysics/"/>
    
    
    <category term="metaphysics" scheme="https://blog.gaoyuan.xyz/tags/metaphysics/"/>
    
    <category term="人类图" scheme="https://blog.gaoyuan.xyz/tags/%E4%BA%BA%E7%B1%BB%E5%9B%BE/"/>
    
    <category term="human design" scheme="https://blog.gaoyuan.xyz/tags/human-design/"/>
    
  </entry>
  
  <entry>
    <title>路由器和命理学习之旅</title>
    <link href="https://blog.gaoyuan.xyz/2025/06/19/Routers-and-Numerology-Learning-Journey/"/>
    <id>https://blog.gaoyuan.xyz/2025/06/19/Routers-and-Numerology-Learning-Journey/</id>
    <published>2025-06-19T07:08:24.000Z</published>
    <updated>2025-06-19T07:48:32.133Z</updated>
    
    <content type="html"><![CDATA[<p>最近失业了，我并没有体会到预想中的松弛，而是感受到了前所未有的焦虑，甚至是连那屹立了35年以上的发际线，竟然出现了后退的迹象。</p><p>不用开启勿扰模式，手机也基本不会有震动和铃声响起。信手拿本闲书，翻了不到十页，还是会不自觉地看看手机的方向。</p><p>出门买个早餐，逆行在熙熙攘攘的人群里中，并未在内心中唤起想象中对那些为生机奔波的人们的同情，反而是有些羡慕。</p><span id="more"></span><p>虽然依旧无法按时入睡，但是辗转反侧的时候，却开始不自觉想起了午夜连环call。那可是我曾经最厌恶的场景啊！</p><p>对于一个上有老下有小的中年失业男，要摆脱这种困境的最好途径就是找一份新的工作。但是我突然暂时不想迈出这一步，我想先做点啥，但是又没想好要做啥。</p><p>我老婆虽然一直都没过问过我的工作。但是朝夕相处那么十多年磨练出的独有第六感，让她也感受到了我的不安与迷茫。</p><p>她之前学过一点中医，听说中医健康管理最近在不断出圈，所以她盘了一个店铺，打算开始这方面的营生。或许她本来还指望着我能给她搭把手，但是看我目前的状态，好像在逐渐成为她前行道路上的阻碍。于是就把我推荐给了她学中医时认识的一位易学大师，让我去学学习，也给大师帮帮忙。</p><p>一直以来，我对于各种神秘事物，都是非常好奇。但仅仅是止步于好奇，毕竟没有经历过什么离奇的事情。</p><p>怀着崇敬与期待，我见到了那些易学大师。</p><p>大师年事已高，但是身体还很硬朗。尽管他收过不少弟子，但是还是想让更多的人可以为自己的所学所受益。</p><p>所以他想录制些视频放到网上，但是有人给他说最好放到区块链上，因为网上的东西不知道哪天也就没了，除非自己做个网站，但是需要持续投入资金才能保证网站一直能打开。</p><p>大师一时听地有些迷糊。后来听说我对这些东西比较熟，所以想听听我的建议。</p><p>我最初也是想给大师做个网站，毕竟有这么多年的行业沉淀，虽然手生了，但是在AI的加持下，肯定能给大师做出一个好用的网站出来。</p><p>但是当我体会到大师的真正需求后，我建议大师把录制的视频刻成光盘，让大师的学生们把光盘投放给有缘人，有缘人再转录投放。</p><p>然后我就成了大师的视频命理课上的听众，大师从阴阳五行，天干地支，藏干十神，流年大运讲起，又按照象法，理法，技法分阶段阐述。</p><p>我间间断断地听了两个月，内心的不安是少了些，可能也是习惯了。但是对于未来的生计问题，我依旧迷茫，因为我已经有2个月没有任何收入了。</p><p>大师就是大师，在有一次我帮大师收拾录制视频的设备时，大师好像看出了我的心思。于是对我说：</p><p>“小高啊，我这个命理学的课程都讲地差不多了，我们来看看你的命盘”。</p><p>我把我的出生时间报给大师后，大师写在一个小本上，拿出本万年历看了会，然后对着本上对我说：</p><p>”你今年是换运了啊，接下来是想自己去做一些事情啊？“</p><p>我说最近是想自己做些事情，但是还没想好做什么。</p><p>大师又指着我的八字给我讲，应该怎么看格局，怎么选喜用神，然后怎么判断组合的吉凶。虽然这个讲解的过程的确是让我加深了对视频课的理解，但是我依旧听地云里雾里的。因为我期望着有个人能给我指条明路，告诉我应该怎么去做，才能尽快有些收入。</p><p>大师的讲解主要集中在原局的解读，也就是相当于告诉我，我这个人能干啥，我在干啥，我想去干啥。</p><p>讲完后，我顿时有种醍醐灌顶的感觉，但是我的生计问题，依旧在迷茫中。</p><p>回家的路上，接到了老同学的电话。因为离晚饭还尚早，所以就先去了他家里。</p><p>一阵寒暄后，他打开了电视。说去年有个同学聚会，阿三带着助理和专业设备去的，还给聚会的人拍了个视频，刚好给我看看。</p><p>说着掏出手机一顿捣鼓，然后点开一个视频给投屏到了电视上。</p><p>看着阿三找人拍摄的视频，我渐渐发现：男同学的脸上再也找不到青葱的模样，岁月的痕迹，或深或浅地刻进了每个女同学的眼角以及或真或假的笑容里。</p><p>在感叹岁月蹉跎的当儿，出于专业人士的友情提醒，我给老同学说：”你把视频放在网上，不太安全吧？“。</p><p>结果我同学说，他打开的是路由器上的私有网盘，只有在他家里才能打开的。</p><p>我只能虚伪地给他点个赞。没想到曾经那个连电脑系统都不会安装的同学，现在还玩地蛮极客。</p><p>晚上又辗转难眠，我索性想起了今天我同学的路由器。</p><p>现在每家每户基本上都有个路由器，但是有人家里的网速快，有人家里的网速慢，有人家里的网速时快时慢。一般网络不好的时候，我们要不就升级带宽，要不就换个好点的路由器。这的确是一件非常稀松平常的事情。</p><p>但是转念一想，我们的人生好像也就是这样，有时好，有时坏。</p><p>有的时候，倒霉的事情，不顺的事情，一件连一件发生，就好像提前约好了一样，但是坚持就过去了，一切就又会慢慢好转。</p><p>有时候，当觉得一切都很平顺的时候，糟心的事情也就随之而来。</p><p>有些糟心的事情可以挺过去，或者说，大部分糟心的事情，都可以通过自己的努力加上时间的淬炼，最终给消磨殆尽，并且回到曾经的美好状态，甚至还是更好。但是有些事情发生后，就再也回不去了。</p><p>每个路由器都有出厂设置，出厂设置决定了路由器可以发挥功用的上限。假设两家人使用同样品牌和型号的路由器，就算接入的带宽都一样，但是也会出现上网体验不一样的情况。有人家里可能有很多电子设备，有人家里可能卧室太多。路由器的工作环境，路由器的信道设置，都会影响路由器功用的发挥。也就是我们上网时觉得这个网快不快。</p><p>白天大师讲的原局也是一样。命盘里的原局就是一个人的出厂设置，我们大部分人在一辈子里可能都无法触碰到这个出厂设置的上限。所以就算不了解命理，也能终此一生。</p><p>但是如果我们了解命理，了解了自己的出厂设置。那么或许就能更加坦然地面对自己的高光时刻以及至暗岁月。</p><p>更有甚者，可以像爆改路由器一样，“逆天改命”。</p><p>当然，这个“逆天”，应该是不能突破出厂设置，也就是在原局之内。</p><p>虽然听着是宿命了些，但是我觉得这样理解可能更恰当点。</p><p>说到最后，要如何出现高光时刻，要如何走出至暗岁月，还是要靠个人的自由意志和后天努力。</p>]]></content>
    
    
    <summary type="html">中年失业后开始学习命理，系统学习阴阳五行，天干地支，藏干十神，流年大运，掌握象法，理法，技法后，以路由器类比命理</summary>
    
    
    
    <category term="metaphysics" scheme="https://blog.gaoyuan.xyz/categories/metaphysics/"/>
    
    
    <category term="metaphysics" scheme="https://blog.gaoyuan.xyz/tags/metaphysics/"/>
    
    <category term="命理" scheme="https://blog.gaoyuan.xyz/tags/%E5%91%BD%E7%90%86/"/>
    
    <category term="人生选择" scheme="https://blog.gaoyuan.xyz/tags/%E4%BA%BA%E7%94%9F%E9%80%89%E6%8B%A9/"/>
    
    <category term="八字" scheme="https://blog.gaoyuan.xyz/tags/%E5%85%AB%E5%AD%97/"/>
    
    <category term="易学" scheme="https://blog.gaoyuan.xyz/tags/%E6%98%93%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>宿命论与自由意志</title>
    <link href="https://blog.gaoyuan.xyz/2025/06/19/Fatalism-and-free-will/"/>
    <id>https://blog.gaoyuan.xyz/2025/06/19/Fatalism-and-free-will/</id>
    <published>2025-06-19T02:04:31.000Z</published>
    <updated>2025-06-19T02:16:31.659Z</updated>
    
    <content type="html"><![CDATA[<p>我们经常听说，科学的尽头是玄学，但是玄学到底是什么？</p><p>虽然这也是我想弄明白的话题，但是我疏漏寡闻，一时无法理清这个庞大的脉络。我只能寄希望与时间的长河，期待着未来能有这么一天。</p><p>既然这是一个暂时不能用现阶段的心智模式理清的概念，那我们应该如何面对这个概念，如何看待玄学？</p><span id="more"></span><p>说起玄学，这似乎是一个我们没有接触过的领域，但是祖辈给我们起的名字，打工人所在办公楼的选址，以及老板办公桌的朝向，甚至是茶前饭后的谈资，实际上都少不了玄学。这就是东方的八字和风水以及西方的占星。</p><p>当然，不是所以人取名都要看八字，也不是所有老板选办公地点要看风水，我们常说的处女座有洁癖，并不适用于所有处女座。</p><p>不管是占星，还是八字，都是基于出生时间和地点，结合不同派别的理法，技法和象法进行解读和预测。那如果是相同的八字或者星盘，是不是会有一样的人生轨迹？</p><p>在我们的人生经历里，或许很少能遇到与自己有相同八字的人来佐证上面的观点。但是我们可能直接或者间接接触过双胞胎，也很少听过双胞胎会有同样的人生经历。不过，对于双胞胎案例的解读，不同的派别会一些特殊的处理方式，貌似用双胞胎案例不是很恰当。</p><p>此时我们可以带入一些常识和命理算法。八字分四柱，即分年月日时，由十天干和十二地支组成。所以只要是两个人在同年同月同日，出生在同一个时辰，那么这两个人的八字就是一样的。查阅资料发现，我国现阶段每年差不多新增900万人口，平均到每天的每个时辰，大约会出生2000多人。这么计算的话，就算结合出生地点等因素的差异，也不用跨朝代，具有相同八字的人还是存在的。</p><p>尽管理论上在同一时空下会存在两个相同的八字，但是在信息传播如此便捷的当下，我们也鲜有听闻两个人会有同样的人生经历和成就。那这个八字预测到底靠不靠谱呢？面对这个玄之又玄的领域，我们应该持什么态度呢？</p><p>作为芸芸众生的我们，短期内无法理清玄学的脉络，自然无法触达其本质。</p><p>面对这种疑惑，可能有人会说：八字里呈现的，更多是一个人的先天因素，但是人出生后，会受到后天的风水，姓名这些因素的影响，所以人生状态就会有差异。</p><p>这种打补丁式的解释，乍一听还是很有道理。但是对于接受了这么多年科学教育的我们，又会产生新的疑惑。要如何衡量后天的影响呢？突然之间，感觉想走进了一条死胡同。</p><p>到底是应该相信玄学？还是持怀疑态度？甚至，只相信自己想相信的？</p><p>面对这种灵魂拷问，一时无所适从！</p><p>也可能我们会发现，还存在比玄学更高维的体系，那我们应该如何面对呢？</p><p>此刻，需要静静！</p><p>既然我们能触碰到这个话题，说明我们肯定是见识过，经历过，或者听闻过相关案例。比如八字里学历好的人，就是上了研究生，当了博士。八字里财的状态好的人，就是比我们能赚钱。</p><p>那哪些八字里有精妙组合的人，是不是就会一帆风顺，平步青云，甚至只需要躺平，等风来？</p><p>那哪些八字里平平无奇，甚至是有多个不利组合的人，是不是烂摆就好？</p><p>我们不信玄学？因为玄学并不总是“管用”。</p><p>我们相信玄学？但是命运早已注定，人生何须奋斗和努力？</p><p>或许，玄学对于人类个体的价值应该是宿命论加个人意志。就像阴阳，这两者是相互消长。</p><p>宿命论是可以显化的部分，也是玄学中易于理解和传播的部分，是阳。个人意志因独立的个体而异，无法客观描述，实际上是玄学的真正价值所在，是阴。宿命论和个人意志也是相互消长。</p><p>一个八字或者是一张星盘上呈现的是我们宿命部分的初始状态。这部分实际上决定了在我们人生经历中个人意志对宿命部分可以干预的初始强弱。对于大部分人而言，我们能读懂这部分，我们就能相对比较容易地过好这一生。</p><p>当有一天有泼天的富贵降临时，我们可能就有接住的准备，以及更好地接住的态度和行动。欲戴其冠，必承其重。</p><p>当有一天我们穷困潦倒时，就算衣衫褴褛，风餐露宿，也能坦然面对。</p>]]></content>
    
    
    <summary type="html">本文围绕宿命论与自由意志 的主题，探讨了玄学在人们生活中的体现，如东方的八字和风水以及西方的占星等，分析了八字等玄学的可靠性问题，以及人们面对玄学时的困惑和态度，还阐述了宿命论与个人意志相互依存的观点，引发读者对玄学和人生诸多方面进行深入思考。</summary>
    
    
    
    <category term="metaphysics" scheme="https://blog.gaoyuan.xyz/categories/metaphysics/"/>
    
    
    <category term="metaphysics" scheme="https://blog.gaoyuan.xyz/tags/metaphysics/"/>
    
    <category term="命理" scheme="https://blog.gaoyuan.xyz/tags/%E5%91%BD%E7%90%86/"/>
    
    <category term="人生选择" scheme="https://blog.gaoyuan.xyz/tags/%E4%BA%BA%E7%94%9F%E9%80%89%E6%8B%A9/"/>
    
  </entry>
  
  <entry>
    <title>flutter入坑指南</title>
    <link href="https://blog.gaoyuan.xyz/2020/02/28/guide-of-start-using-flutter/"/>
    <id>https://blog.gaoyuan.xyz/2020/02/28/guide-of-start-using-flutter/</id>
    <published>2020-02-27T19:20:00.000Z</published>
    <updated>2025-06-09T23:54:02.611Z</updated>
    
    <content type="html"><![CDATA[<p>flutter是google推出的一个开源的ui框架(UI software development kit)，开发者可以使用flutter，通过dart语言来开发跨平台，高保真，高性能的<code>App</code>，目前已经支持的平台有： <code>Android</code>, <code>IOS</code>, <code>Windows</code>, <code>Mac</code>, <code>Linux</code>, <code>Google Fuchsia[5]</code>和 <code>Web</code>。</p><span id="more"></span><p>flutter的第一个版本(Alpha (v0.0.6))是在2017年5月份发布的。2018年12月4号，google发布了flutter1.0，支持android和ios平台。</p><p>ui框架，是一个比较抽象的概念。但是说到移动端跨平台的ui框架，我们可能会联想到<code>Hybrid</code>,<code>React-Native</code>等。所以我们以移动端为例，先尝试解释下ui框架。</p><p>如果将移动端的系统架构进行分层，大概如下。</p><img src="/images/flutter/mobile_struct.png" class="" title="mobile os architecture android os ios os struct"><p>其中，对ios系统的每层架构进行细分，如下图</p><img src="/images/flutter/mibile_ios_struct_1.png" class="" title="mobile os architecture ios os layer architecture"><p>对android系统的每层架构进行细分，如下图</p><img src="/images/flutter/mobile_android_struct.png" class="" title="mobile os architecture android os layer architecture"><p>我们在android系统上开发出的apk，或者在ios系统上开发的ipa，主要涉及和平台特有的SDK，以及本地服务（蓝牙，摄像头，传感地，地理位置），与系统的交互如下图：</p><img src="/images/flutter/mobile_native_struct.png" class="" title="mobile os architecture android ios native oem sdk"><p>如果要开发一款<code>App</code>，分别支持android平台和ios平台的。这样的话，就需要分别基于android和ios平台上特有的SDK进行开发。一款产品，需要维护两套代码。由于两个平台存在着不同的特性，很难在两个平台上对齐相同的交互体验。</p><p>所以后来出现了<code>Hybrid</code>，即混合开发的方案。可以基于IOS平台上的UIWebView和android平台上的WebView，使用HTML，CSS和Javascript进行开发，借助第三方的<code>Hybrid</code>框架，基本可以做到一套代码，多端运行。由于要使用本地的浏览器（UIWebView或WebView）进行渲染，还要使用第三方<code>Hybrid</code>框架提供的BRIDGE，与本地服务进行通信，所以性能会比较差。</p><img src="/images/flutter/mobile_hybrid_struct.png" class="" title="mobile os architecture android ios Hybrid"><p>在后来就出现了<code>React-Native</code>等跨平台的方案，可以通过js-bridge与OEM组件，以及本地服务进行通信，较<code>Hybrid</code>的方案，可以带来更好的用户体验。</p><img src="/images/flutter/mobile_cross_platform_struct.png" class="" title="mobile os architecture android ios Cross-Platform REACT NATIVE"><p>到这里，我们再次回归到本文的重点，flutter的方案，如下图：</p><img src="/images/flutter/mobile_flutter_struct.png" class="" title="mobile os architecture android ios flutter"><p>flutter并不会直接编译成ios或者android应用程序。基于flutter开发的应用程序，包括两部分：</p><pre><code>Dart业务代码Flutter引擎代码</code></pre><p>业务代码会经过frontend_server，gen_snapshot，xcrun，ninja编译工具，转换为具体相应系统架构（arm&#x2F;arm64等）的二进制指令。相关编译产物如下：</p><img src="/images/flutter/mobile_flutter_struct_4.png" class="" title="flutter编译产物"><p>以android平台为例，基于flutter开发的应用程序的启动流程如下：</p><img src="/images/flutter/mobile_flutter_struct_5.png" class="" title="flutter应用程序启动流程"><pre><code>Flutter Application会通过onCreate完成初始化配置，加载引擎libflutter.so，注册JNI方法然后调用Flutter Activity的onCreate，通过FlutterJNI的AttachJNI()方法来初始化引擎Engine，Dart虚拟机，Isolate，taskRunner等对象。再经过层层处理最终调用main.dart中main()方法，执行runApp(Widget app)来处理整个Dart业务代码。</code></pre><p>由于flutter使用自渲染引擎，不使用WebView和平台的原生控件，所以不仅保证了多个平台上ui的一致性，也保证高性能。flutter的技术架构如下</p><img src="/images/flutter/mobile_flutter_struct_2.png" class="" title="flutter应用程序技术架构"><p>通过Dart Framework层来统一Flutter C++引擎和Web引擎，最终就可以运行在Android，iOS，Browser上。</p><p>要开始使用flutter的话，非常方便。在flutter官网，可以选择不同平台，根据官网的指南进行安装，非常easy。</p><pre><code>https://flutter.dev/docs/get-started/install</code></pre><p>reference：</p><p>[^1] <a href="https://book.flutterchina.club/chapter1/flutter_intro.html">https://book.flutterchina.club/chapter1/flutter_intro.html</a></p><p>[^2] <a href="https://flutter.dev/">https://flutter.dev/</a></p><p>[^3] <a href="http://gityuan.com/flutter/">http://gityuan.com/flutter/</a></p><p>[^4] <a href="https://www.intellectsoft.net/blog/mobile-app-architecture/">https://www.intellectsoft.net/blog/mobile-app-architecture/</a></p><p>[^5] <a href="https://tech.meituan.com/2018/08/09/waimai-flutter-practice.html">https://tech.meituan.com/2018/08/09/waimai-flutter-practice.html</a></p>]]></content>
    
    
    <summary type="html">通过介绍flutter的技术架构和安装过程，带你领略flutter的魅力所在</summary>
    
    
    
    <category term="mobile" scheme="https://blog.gaoyuan.xyz/categories/mobile/"/>
    
    
    <category term="mobile" scheme="https://blog.gaoyuan.xyz/tags/mobile/"/>
    
    <category term="flutter" scheme="https://blog.gaoyuan.xyz/tags/flutter/"/>
    
  </entry>
  
  <entry>
    <title>基于Opcache发布php项目</title>
    <link href="https://blog.gaoyuan.xyz/2017/12/14/use-opcache-to-deploy-php/"/>
    <id>https://blog.gaoyuan.xyz/2017/12/14/use-opcache-to-deploy-php/</id>
    <published>2017-12-14T03:17:00.000Z</published>
    <updated>2025-06-09T23:54:02.610Z</updated>
    
    <content type="html"><![CDATA[<p>php的<code>Opcache</code>已经release好多年了，现在基本都是php的标配。最近看到了php创始人<code>Rasmus Lerdorf</code>的一篇<a href="http://talks.php.net/confoo16#/">talk</a>，于是有了使用php的opcache发布代码的想法。</p><span id="more"></span><h1 id="Opcache"><a href="#Opcache" class="headerlink" title="Opcache"></a>Opcache</h1><p><code>Opcache</code>也叫<code>Zend OPcache</code>，其前身是Zend公司开发的闭源PHP优化加速组件<code>Optimizer+</code>。于2013年3月中旬改名为<code>Opcache</code>，并开源。</p><p>在2013年6月发布的php5.5.0版本中，整合了<code>Opcache</code>。</p><p><a href="https://pecl.php.net/package/ZendOpcache">pecl</a>上的<code>Opcache</code>扩展，于2015-01-12转正。</p><p><code>OPcache</code>通过将 PHP 脚本预编译的字节码存储到共享内存(或者文件)中来提升 PHP 的性能， 存储预编译字节码的好处就是 省去了每次加载和解析 PHP 脚本的开销。不过<code>OPcache</code> 没有象 APC 那样的 user cache 功能。</p><img src="/images/opcache/php_lifecycle_opcache.png" class="" title="PHP script lifecycle"><h1 id="Opcache使用"><a href="#Opcache使用" class="headerlink" title="Opcache使用"></a>Opcache使用</h1><p>php5.5及以上版本已经整合了<code>Opcache</code>，只需要在编译php时添加</p><pre><code>--enable-opcache --enable-opcache-file</code></pre><p>即可为php添加opcache扩展，然后修改<code>php.ini</code>，主动开启<code>Opcache</code></p><pre><code>zend_extension=&quot;/path/opcache.so&quot;[opcache]opcache.enable=1opcache.enable_cli=1</code></pre><p>之后运行php程序时，会生成<code>Opcache</code>，下次运行时可以直接加载，免去了词法分析，语法分析，以及解析php脚本花费的时间。</p><p><code>Opcache</code>默认存储在php进程的共享内存中，不过也可以存储到本地文件中。性能的差异大致如下：</p><img src="/images/opcache/secondary_file-based_cache.png" class="" title="Persistent secondary file-based cache for OPCache"><p>看完这张图，突然有种脑洞大开的感觉。</p><p>发布php时，预先生成opcache-file，只发布opcache，是否可行呢？</p><h1 id="使用Opcache发布php"><a href="#使用Opcache发布php" class="headerlink" title="使用Opcache发布php"></a>使用Opcache发布php</h1><p>开启<code>Opcache</code>后，可以使用<code>opcache_compile_file</code>生成php的opcache-file。涉及<code>php.ini</code>中的如下配置参数</p><pre><code>opcache.max_accelerated_files=20000opcache.file_cache=/data/php/opcacheopcache.file_cache_only=0opcache.validate_timestamps=0opcache.save_comments=0</code></pre><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">opcache_compile_files</span>(<span class="params"><span class="variable">$dir</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">foreach</span>(<span class="keyword">new</span> <span class="built_in">RecursiveIteratorIterator</span>(<span class="keyword">new</span> <span class="built_in">RecursiveDirectoryIterator</span>(<span class="variable">$dir</span>)) <span class="keyword">as</span> <span class="variable">$v</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable">$v</span>-&gt;<span class="title function_ invoke__">isDir</span>() &amp;&amp; <span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;%\.php$%&#x27;</span>, <span class="variable">$v</span>-&gt;<span class="title function_ invoke__">getRealPath</span>())) &#123;</span><br><span class="line">            <span class="variable">$file</span> = <span class="variable">$v</span>-&gt;<span class="title function_ invoke__">getRealPath</span>();</span><br><span class="line">            <span class="title function_ invoke__">opcache_compile_file</span>(<span class="variable">$file</span>);</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$file</span> . <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">opcache_compile_files</span>(<span class="string">&#x27;/path/project/foo&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在命令行下执行上述脚本，即可遍历整个项目，生成对应php的opcache-file，同时会清空原php文件的内容。</p><p>如：</p><pre><code>ls /data/php/opcache/4d400aec8fadf667fabe41a87f30f7cc/data/php/opcache/4d400aec8fadf667fabe41a87f30f7cc/path/project/app/Utility.php.bin</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 生成opcache-file时，需要设置opcache.file_cache_only=0</span><br><span class="line">2. 需要保持原有项目的目录结构和文件 -- 内容可以清空，使opcache-file生效</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">如何基于php的Opcache发布php代码</summary>
    
    
    
    <category term="php" scheme="https://blog.gaoyuan.xyz/categories/php/"/>
    
    
    <category term="devops" scheme="https://blog.gaoyuan.xyz/tags/devops/"/>
    
    <category term="php" scheme="https://blog.gaoyuan.xyz/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>深入理解双因子认证</title>
    <link href="https://blog.gaoyuan.xyz/2017/01/05/2fa-a-programmers-perspective/"/>
    <id>https://blog.gaoyuan.xyz/2017/01/05/2fa-a-programmers-perspective/</id>
    <published>2017-01-05T04:03:00.000Z</published>
    <updated>2025-06-09T23:54:02.610Z</updated>
    
    <content type="html"><![CDATA[<p>去年年初，让ops在服务器上开启了基于google-authenticator的双因子认证。最近花了点时间进行深入了解，记录如下。</p><span id="more"></span><h1 id="双因子认证的相关概念"><a href="#双因子认证的相关概念" class="headerlink" title="双因子认证的相关概念"></a>双因子认证的相关概念</h1><p>双因子认证（Two-factor authentication，也叫2FA），是一种通过组合两种不同的验证方式进行用户身份验证的机制。Google在2011年3月份，宣布在线上使用双因子认证，MSN和Yahoo紧随其后。</p><p>双因子认证，除了需要验证用户名密码外，还要结合另外一种实物设备，如Rsa令牌，或者手机。</p><p>如果我们把传统的用户名密码验证称为单因子认证（1FA），那么对比双因子认证（2FA），他们的区别如下：</p><blockquote><p>1FA - What you know (e.g. a password, a pin)</p></blockquote><blockquote><p>2FA - What you have (e.g. a phone, a hardware token)</p></blockquote><blockquote><p>3FA - What you are (e.g. your fingerprints, you retina)</p></blockquote><p>双因子认证的产品大致可以分成两类：</p><ul><li>可以产生token的硬件设备</li><li>智能手机的app</li></ul><p>手机短信验证码，登录微信公众号时的扫码确认都可以称为双因子认证。</p><p>双因子认证，还会结合一个只有你有的硬件设备。只要这个专属的硬件设备不丢失（察觉这个设备丢失，比用户名密码泄露，会容易很多），就可以大大地提升账号的安全性。</p><h1 id="双因子认证的实现"><a href="#双因子认证的实现" class="headerlink" title="双因子认证的实现"></a>双因子认证的实现</h1><p>双因子认证的流程如下：</p><img src="/images/2fa/flow.png" class="" title="Two-factor authentication flow"><p>认证过程中涉及的token，一般会使用一次性密码(<a href="https://en.wikipedia.org/wiki/One-time_password">One-time password</a>)，相关实现有：</p><ul><li>HOTP: 基于次数的一次性密码（<a href="https://tools.ietf.org/html/rfc4226">HMAC-Based One-Time Password</a>）</li><li>TOTP: 基于时间的一次性密码（<a href="https://tools.ietf.org/html/rfc6238">Time-Based One-Time Password</a>）</li></ul><p><code>HOTP</code>和<code>TOTP</code>的实现都基于<a href="https://tools.ietf.org/html/rfc2104">HMAC-SHA-1</a>算法。</p><p><code>HOTP</code>的生成算法如下</p><pre><code>HOTP(K,C) = Truncate(HMAC-SHA-1(K,C))</code></pre><p>其中：</p><ul><li><code>C</code>是一个8-byte的自增变量。对于客户端，每生成一次性密码，其值加1。对于服务端，每次成功认证客户端产生的一次性密码，其值加1。在<code>HOTP</code>生成（客户端）和验证（服务端）过程中，C的值必须同步。</li><li><code>K</code>是客户端和服务端使用的共享密钥，每个客户端的<code>K</code>应该都是唯一的。</li></ul><p>生成步骤如下：</p><pre><code>Step 1: 使用HMAC-SHA-1算法，利用C和K，生成一个长度为20-byte的40个十六进制字符，即：HS = HMAC-SHA-1(K,C)Step 2: 根据前面产品的字符串`HS`，生成一个长度为4-byte的8个十六进制字符，即：Sbits = DT(HS)，DT是根据HS，动态产生Sbits的方法，后面的示例中会提到Step 3: 根据前面的Sbits，计算一个HOTP的值，一般为6位数字。</code></pre><blockquote><p>2 nibbles (2 hex characters) &#x3D; 1-byte</p></blockquote><p><code>TOTP</code>可以当做是<code>HOTP</code>算法的一个变种，可以将<code>TOTP</code>的生成算法定义为：</p><pre><code>TOTP = HOTP(K, T)</code></pre><p><code>K</code>同<code>HOTP</code>算法中<code>K</code>的定义，是客户端和服务端使用的共享密钥，<code>T</code>是一个整数，定义如下：</p><pre><code>T = floor((Current Unix time - T0) / X)</code></pre><p>其中：</p><ul><li><code>T0</code>是起始的Unix Time，默认为0</li><li><code>X</code>是<code>T</code>增长的步长，默认为30</li></ul><p>即<code>T</code>是以30为步长，当前的Unix Time距初始的Unix Time<code>T0</code>增长的数量。</p><p>如果<code>T0</code>&#x3D;0，<code>X</code>&#x3D;30，那么当此刻的Unix time是59时，<code>T</code>&#x3D;1，当此刻的Unix time为60时，<code>T</code>&#x3D;2。<code>TOTP</code>算法生成的一次性密码，就会每30s变更一次。</p><h1 id="一次性密码的生成过程"><a href="#一次性密码的生成过程" class="headerlink" title="一次性密码的生成过程"></a>一次性密码的生成过程</h1><p>本文以HMAC-SHA-1算法生成的字符串<code>HS</code>的值是<code>0215a7d8c15b492e21116482b6d34fc4e1a9f6ba</code>为例，介绍一次性密码的生成过程。</p><p>如果使用<code>TOTP</code>算法进行双因子认证，要让用户在30s内输入40个十六进制的字符，这是一件很难想象的事情。所以我们需要想个办法，将<code>HS</code>转换地更加便于输入，而又不失安全性。这就是前面提到的DT（Dynamic Truncation）的处理过程。</p><p>为了更清晰地展示生成过程，用下图表示<code>HS</code>：</p><img src="/images/2fa/hotp_step1.png" class="" title="Two-factor authentication step1"><p>前面的图中包含40个字符，每个字符都占4-bits（有16个可能的值0-15），被分成了20组单独的字符串。</p><p>我们先去找<code>HS</code>的低4位（最后一个字符），作为截取字符串的起始位置。在我们的例子里，最后一个字符是<code>a</code>：</p><img src="/images/2fa/hotp_step2.png" class="" title="Two-factor authentication step2"><p>将十六进制的字符<code>a</code>转成十进制数是<code>10</code>。</p><p>我们将第1组字符串的偏移量用<code>0</code>表示，以此类推，如下：</p><img src="/images/2fa/hotp_step3.png" class="" title="Two-factor authentication step3"><p>然后，从字符串<code>HS</code>的第<code>10</code>个偏移量开始，截取<code>4</code>组字符串（或者是接下来的31-bits）。</p><blockquote><p>这样截取的最大偏移量是15+4&#x3D;19，刚好没有越界</p></blockquote><p>因此，我们通过DT（Dynamic Truncation）处理，将<code>HS</code>转换后得到的字符串是<code>6482b6d3</code>：</p><img src="/images/2fa/hotp_step4.png" class="" title="Two-factor authentication step4"><p>将十六进制的<code>6482b6d3</code>转成十进制数是<code>1686288083</code>。</p><p>因为我们需要一个6位的数字，所以和<code>1000000</code>进行取模运算：</p><pre><code>1686288083 modulo 1000000</code></pre><p>最后的结果是：</p><pre><code>288083</code></pre><h1 id="使用google-authenticator，开启服务器双因子认证"><a href="#使用google-authenticator，开启服务器双因子认证" class="headerlink" title="使用google-authenticator，开启服务器双因子认证"></a>使用google-authenticator，开启服务器双因子认证</h1><p>首先，去你喜欢的android应用市场，或者apple的appStore去安装：“Google Authenticator（google身份验证器）”。</p><p>然后登录要开启双因子认证登录的服务器，进行下面的操作。</p><p>安装依赖</p><pre><code>yum -y install gcc gcc-c++ make wget pam-devel</code></pre><p>安装Google Authenticator</p><pre><code>wget http://google-authenticator.googlecode.com/files/libpam-google-authenticator-1.0-source.tar.bz2tar jxvf libpam-google-authenticator-1.0-source.tar.bz2cd libpam-google-authenticator-1.0makesudo make install</code></pre><p>配置SSH登录时调用google-authenticator模块</p><p>编辑文件<code>/etc/pam.d/sshd</code>，添加：</p><pre><code>auth       required     pam_google_authenticator.so</code></pre><p>编辑文件<code>/etc/ssh/sshd_config</code>，在文件中查找<code>ChallengeResponseAuthentication</code>和<code>UsePAM</code>，修改为如下内容：</p><pre><code>ChallengeResponseAuthentication yesUsePAM yes</code></pre><p>重启ssh</p><pre><code>sudo service ssh restart</code></pre><p>下面是配置Google Authenticator的相关步骤。</p><p>如果要为用户<code>zhangsan</code>添加ssh登录时的双因子认证，执行如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - zhangsan</span><br><span class="line">google-authenticator</span><br></pre></td></tr></table></figure><p>会出现一串问题，让你选<code>y</code>或者<code>n</code>。</p><pre><code>Do you want authentication tokens to be time-based (y/n) yhttps://www.google.com/chart?chs=200x200&amp;chld=M|0&amp;cht=qr&amp;chl=otpauth://totp/zhangsan@ali%3Fsecret%3DWKHM6UVJNTPYSPTQYour new secret key is: WKHM6UVJNTPYSPTQYour verification code is 434260Your emergency scratch codes are:3028701070585905687483371517671238041521</code></pre><p>上面的这一步，会生成一个base32编码的共享密钥<code>WKHM6UVJNTPYSPTQ</code>，即前面的<code>K</code>，用于在客户端进行绑定（如果可以翻墙的话，实际上会看到一张二维码，使用Google Authenticator app扫码即可以完成绑定）。</p><p>共享密钥使用base32而非base64的原因如下：</p><ul><li>base32编码的字符串，包含了大写英文字母和数字2-7。不会因字体显示问题，把1，8，0和’I’,’B’, ‘O’混淆，更利于输入。</li><li>base32编码的字符串，出现在url中时，可以不用进行url编码处理（encode），便于直接使用生成二维码的web服务。</li></ul><p>同时，基于当前的Unix time，生成了一个动态验证码<code>434260</code>，可用于测试。并生成了5个应急备用验证码（上面的emergency scratch codes），可以在绑定设备丢失的情况下使用（每个应急码只能使用一次）。</p><p>剩下的问题，没有特殊癖好，可以都选<code>y</code>。</p><pre><code>Do you want me to update your &quot;/home/zhangsan/.google_authenticator&quot; file (y/n) yDo you want to disallow multiple uses of the same authenticationtoken? This restricts you to one login about every 30s, but it increasesyour chances to notice or even prevent man-in-the-middle attacks (y/n) yBy default, tokens are good for 30 seconds and in order to compensate forpossible time-skew between the client and the server, we allow an extratoken before and after the current time. If you experience problems with poortime synchronization, you can increase the window from its defaultsize of 1:30min to about 4min. Do you want to do so (y/n) yIf the computer that you are logging into isn&#39;t hardened against brute-forcelogin attempts, you can enable rate-limiting for the authentication module.By default, this limits attackers to no more than 3 login attempts every 30s.Do you want to enable rate-limiting (y/n) y</code></pre><p>之后，ssh登录服务器时，会看到类似这样的提示：</p><pre><code>verification code:</code></pre><p>这时，打开手机上的google身份验证器App，输入对应的code，如下：</p><img src="/images/2fa/google-authenticator.png" class="" title="google 验证器 flow"><p>reference：</p><p>[^1] <a href="https://pthree.org/2014/04/15/time-based-one-time-passwords-how-it-works/">https://pthree.org/2014/04/15/time-based-one-time-passwords-how-it-works/</a></p><p>[^2] <a href="https://garbagecollected.org/2014/09/14/how-google-authenticator-works/">https://garbagecollected.org/2014/09/14/how-google-authenticator-works/</a></p><p>[^3] <a href="https://www.blackmoreops.com/2014/06/26/securing-ssh-two-factor-authentication-using-google-authenticator/">https://www.blackmoreops.com/2014/06/26/securing-ssh-two-factor-authentication-using-google-authenticator/</a></p>]]></content>
    
    
    <summary type="html">深入理解双因子认证，使用google验证器搭建双因子认证服务</summary>
    
    
    
    <category term="devops" scheme="https://blog.gaoyuan.xyz/categories/devops/"/>
    
    
    <category term="devops" scheme="https://blog.gaoyuan.xyz/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>mac终端穿墙技术汇总</title>
    <link href="https://blog.gaoyuan.xyz/2016/11/17/mac-terminal-cross-gfw/"/>
    <id>https://blog.gaoyuan.xyz/2016/11/17/mac-terminal-cross-gfw/</id>
    <published>2016-11-17T02:32:39.000Z</published>
    <updated>2025-06-09T23:54:02.609Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个互联网从业人员，要想在天朝愉快地工作，生活，目前必须正视墙（gfw）的存在。<br>本文涉及的翻墙方法，主要针对mac系统。但大部分内容，同样适用于window和linux。也可以自行寻找相关替代品。</p><span id="more"></span><h1 id="土豪的方法"><a href="#土豪的方法" class="headerlink" title="土豪的方法"></a>土豪的方法</h1><p>如果你是一个使用mac系统的土豪，那么，访问这个网站 <a href="http://nssurge.com/">http://nssurge.com/</a> 就够了。</p><h1 id="others"><a href="#others" class="headerlink" title="others"></a>others</h1><p>实际上，这才是本文的重点。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>我们需要先搭建一个ss（Shadowsocks）服务器，或者买个账号（<a href="https://shadowsocks.com/%EF%BC%89%E3%80%82">https://shadowsocks.com/）。</a></p><h3 id="搭建ss-server"><a href="#搭建ss-server" class="headerlink" title="搭建ss server###"></a>搭建ss server###</h3><ul><li>买个海外的云主机，各大云的香港或者海外节点，应该都能满足需求。</li><li>安装 ss server<br>在云主机的命令行下，执行如下命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install shadowsocks</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/shadowsocks/shadowsocks.git</span><br><span class="line">cd shadowsocks</span><br><span class="line">python setup.py</span><br></pre></td></tr></table></figure><ul><li>配置<br>创建配置文件，如<code>/etc/shadowsocks.json</code>，示例内容如下</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;server&quot;:&quot;my_server_ip&quot;,</span><br><span class="line">    &quot;server_port&quot;:8388,</span><br><span class="line">    &quot;local_port&quot;:1080,</span><br><span class="line">    &quot;password&quot;:&quot;barfoo!&quot;,</span><br><span class="line">    &quot;timeout&quot;:600,</span><br><span class="line">    &quot;method&quot;:&quot;table&quot;,</span><br><span class="line">    &quot;auth&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>配置文件是json格式，注意最后一行没有<code>,</code></p></blockquote><ul><li>启动ss server<br><code>ssserver -c /etc/shadowsocks.json -d start</code></li><li>停止ss server<br><code>ssserver -c /etc/shadowsocks.json -d stop</code></li></ul><h3 id="安装ss-客户端"><a href="#安装ss-客户端" class="headerlink" title="安装ss 客户端"></a>安装ss 客户端</h3><p>推荐 <a href="https://github.com/shadowsocks/ShadowsocksX-NG">ShadowsocksX-NG</a>，因为 <a href="https://github.com/shadowsocks/shadowsocks-iOS/releases">ShadowsocksX</a>已无法正常更新pac文件。</p><p>至此，使用浏览器的话，就可以自由地在互联网上遨游了。当然，你会发现更好用的翻墙技术。</p><h2 id="终端-terminal-翻墙"><a href="#终端-terminal-翻墙" class="headerlink" title="终端(terminal)翻墙##"></a>终端(terminal)翻墙##</h2><h3 id="亲测可用的方案"><a href="#亲测可用的方案" class="headerlink" title="亲测可用的方案"></a>亲测可用的方案</h3><p>下载软件 <a href="https://www.proxifier.com/download.htm">proxifier</a>，仅支持windows和mac，收费软件。</p><p>如果是学生的话，可以给我留言，我共享个注册码给你。其他人建立购买，在这物价横飞的时代，几百块，分分钟就花没了。</p><p>shadowsocks代理属于socks5代理，通俗的理解，socks5只是局部代理。使用Proxifier把shadowsocks代理转全局代理，类vpn。所以，该方案实际上不局限于终端翻墙。</p><h3 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h3><p><a href="https://eliyar.biz/proxy-for-mac-terminal/">proxychains-ng</a><br><a href="https://mba811.gitbooks.io/web-study/content/fq/fq3.html">tsocks</a></p><h1 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h1><p>[^1] <a href="https://shadowsocks.org/">https://shadowsocks.org/</a></p><p>[^2] <a href="https://github.com/shadowsocks">https://github.com/shadowsocks</a></p><p>[^3] <a href="https://shadowsocks.com/">https://shadowsocks.com/</a></p><p>[^4] <a href="https://www.dou-bi.co/ss-jc7/">https://www.dou-bi.co/ss-jc7/</a></p><p>[^5] <a href="http://www.voidcn.com/blog/shenshouer/article/p-6254512.html">http://www.voidcn.com/blog/shenshouer/article/p-6254512.html</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;作为一个互联网从业人员，要想在天朝愉快地工作，生活，目前必须正视墙（gfw）的存在。&lt;br&gt;本文涉及的翻墙方法，主要针对mac系统。但大部分内容，同样适用于window和linux。也可以自行寻找相关替代品。&lt;/p&gt;</summary>
    
    
    
    <category term="devops" scheme="https://blog.gaoyuan.xyz/categories/devops/"/>
    
    
    <category term="devops" scheme="https://blog.gaoyuan.xyz/tags/devops/"/>
    
    <category term="gfw" scheme="https://blog.gaoyuan.xyz/tags/gfw/"/>
    
  </entry>
  
  <entry>
    <title>使用charles在移动设备上捕获https数据包</title>
    <link href="https://blog.gaoyuan.xyz/2016/06/30/charles-https/"/>
    <id>https://blog.gaoyuan.xyz/2016/06/30/charles-https/</id>
    <published>2016-06-30T08:38:16.000Z</published>
    <updated>2025-06-09T23:54:02.608Z</updated>
    
    <content type="html"><![CDATA[<p>对于互联网从业人员而言，掌握抓包，是必备技能。</p><span id="more"></span><p><code>Charles</code>是一个http代理，工作模式如下图：</p><img src="/images/mobile/http_proxy.png" class="" title="抓包"><p>但是默认只能抓http协议的数据包，要捕获https的数据包，需要进行相关配置。</p><p>下文以<code>IOS</code>移动设备为例，讲述配置步骤（<code>android</code>设备类似）：</p><ul><li>在移动设备安装ssl证书</li></ul><p>Charles ssl证书的下载地址如下：</p><p><a href="http://www.charlesproxy.com/getssl">http://www.charlesproxy.com/getssl</a></p><p>在移动设备的浏览器中打开上述<code>Url</code>，即可进行安装。</p><ul><li>安装http代理<code>Charles</code></li></ul><p>软件下载地址如下：<br><a href="http://www.charlesproxy.com/latest-release/download.do">http://www.charlesproxy.com/latest-release/download.do</a></p><ul><li>启用http代理</li></ul><p>打开<code>Charles</code>软件，默认会启动一个监听本地8888端口的http代理， 也可以在<code>Charles</code>的设置中修改相关端口。</p><ul><li>配置<code>Charles</code>支持https</li></ul><p>在<code>Charles</code>中打开：</p><pre><code>Proxy -&gt; SSL Proxying Settings</code></pre><p>勾选</p><pre><code>Enable SSL Proxying</code></pre><p>然后在下方的<code>Locations</code>中点击</p><pre><code>Add</code></pre><p>添加需要抓https接口的域名。</p><p>例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host:www.baidu.com</span><br><span class="line">Port:443</span><br></pre></td></tr></table></figure><ul><li>在移动设备上修改代理</li></ul><img src="/images/mobile/ios_http_proxy.png" class="" title="ios设置代理"><p>其中，<code>服务器</code>是安装了<code>Charles</code>软件的电脑的<code>IP</code>，端口是<code>Charles</code> http代理开启的端口。</p>]]></content>
    
    
    <summary type="html">通过使用charles设置代理，捕获移动设备上捕获的https数据包</summary>
    
    
    
    <category term="devops" scheme="https://blog.gaoyuan.xyz/categories/devops/"/>
    
    
    <category term="devops" scheme="https://blog.gaoyuan.xyz/tags/devops/"/>
    
    <category term="ios" scheme="https://blog.gaoyuan.xyz/tags/ios/"/>
    
    <category term="charles" scheme="https://blog.gaoyuan.xyz/tags/charles/"/>
    
    <category term="https" scheme="https://blog.gaoyuan.xyz/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>互联网创业公司是否需要后端工程师</title>
    <link href="https://blog.gaoyuan.xyz/2015/03/30/does-startup-company-need-backend-development-engineer/"/>
    <id>https://blog.gaoyuan.xyz/2015/03/30/does-startup-company-need-backend-development-engineer/</id>
    <published>2015-03-30T10:05:00.000Z</published>
    <updated>2025-06-09T23:54:02.607Z</updated>
    
    <content type="html"><![CDATA[<p>随着LeanCloud等<code>baas</code>云服务的兴起，对于一个互联网创业公司而言，是否还需要专门的后端工程师？</p><span id="more"></span><p>一个典型的web app的架构如下：</p><img src="/images/baas/app_struct.png" class="" title="web app典型架构"><p>客户端或者浏览器调用后端服务，进行数据的写入和读取。让用户通过互联网，完成信息的交换。</p><p>以一个b-s结构的web服务为例，其前后端基本架构大致如下：</p><img src="/images/baas/simple_web_struct.png" class="" title="web 服务的前后端基本架构"><p>前端主要负责用户界面的布局和交互处理，后端包括：</p><pre><code>1. 后端业务逻辑处理2. 与前端用户界面进行相关交互</code></pre><p>而一个要运行在生产环节下的后端服务架构，应该大致是下面这个样子：</p><img src="/images/baas/web_struct.png" class="" title="web web服务后端架构"><p>后端服务并不是直接对数据库进行写入和查询操作，每一次到达后端服务的请求，都附带着自身的业务逻辑。</p><p>虽然我们可以剥离某些与业务不是强关联的模块，增加一层公共服务。但是由于每个公司商业模式和运营需求的限制，业务逻辑的<code>领域</code>特性，会一直存在。</p><p>而现在的<code>baas</code>等服务，主要提供的是数据存储、实时消息、统计分析以及扩展组件等基础公共服务。有了这些服务，的确满足业务需求的情况下，降低后端服务的开发成本。</p><p>互联网的核心价值是：</p><pre><code>平等，共享，透明，高度化的信息对称快速和善变，强烈的交互式客户体验</code></pre><p><code>信息</code>（数据）和<code>交互体验</code>（前端ui）都很重要。</p><p>当然，随着<code>baas</code>服务的发展，对于业务逻辑不是很复杂的互联网应用，的确可以完全使用<code>baas</code>服务替代现有的后端服务。但是这样就会把后端逻辑变成一个黑盒。出了问题只能等待baas服务提供商解决。</p><p>对于创业公司而言，在选择类似的服务时，需要根据自身的业务形态和人员配备等，在前期的人员投入，后期的维护成本以及业务的最终形态，系统的扩展性，数据的安全性等方面，进行权衡。</p><p>而身处创业公司的后端工程师，也需要积极了解行业动态，如果使用<code>baas</code>服务能满足业务需求的，也就没有必要再去重复开发。</p><blockquote><p>baas（Backend as a Service）</p></blockquote><p>即软件即服务，如APICloud，LeanCloud。</p><blockquote><p>paas（Platform as a Service）</p></blockquote><p>即平台即服务，如google的gae，sina的sae。</p><blockquote><p>laas（Infrastructure as a Service）</p></blockquote><p>即基础设施即服务，如亚马逊的aws，阿里云，腾讯云，linode。</p><blockquote><p>saas（Software as a Service）</p></blockquote><p>即软件即服务，如云盘。</p>]]></content>
    
    
    <summary type="html">对于互联网创业公司而言，随着baas等云服务的兴起，是否还需要专门的后端工程师</summary>
    
    
    
    <category term="collect" scheme="https://blog.gaoyuan.xyz/categories/collect/"/>
    
    
    <category term="collect web bass" scheme="https://blog.gaoyuan.xyz/tags/collect-web-bass/"/>
    
  </entry>
  
  <entry>
    <title>那个套模版的，放开你的F5</title>
    <link href="https://blog.gaoyuan.xyz/2015/02/28/release-f5-for-template-engineer/"/>
    <id>https://blog.gaoyuan.xyz/2015/02/28/release-f5-for-template-engineer/</id>
    <published>2015-02-28T10:29:00.000Z</published>
    <updated>2025-06-09T23:54:02.607Z</updated>
    
    <content type="html"><![CDATA[<p>老江说过：“科学技术是第一生产力”。技术的魅力在于通过改善相关流程或者提供相关工具，对人们的生活进行改善，make live esaier。</p><span id="more"></span><p><em>对于自喻为模版工程师的同行们，套模版的流程大抵是：</em></p><pre><code>写代码，保存打开浏览器，按F5刷新页面，检查相关前端效果</code></pre><p>我记得<a href="http://weibo.com/yjf10">轩脉刃</a>曾经写过一个统计鼠标按键的小工具。如果对模版工程师工作时键盘的按键进行统计，那么F5的使用率肯定不容忽视。</p><p>倘若能在代码保存后就自动刷新浏览器，那不仅能解放模版工程师的F5按键，也能提升他们的开发效率。突然感觉非常美妙。</p><p>我记得有人说过，这个世界上不缺乏原创的idea，缺的只是一双能发现它的眼睛。</p><p>正如<code>livereload</code>所说的－“The Web Developer Wonderland”。</p><p>使用<code>livereload</code>，<em>通过如下几个步骤</em>，就可以做到当我们保存代码后，自动刷新浏览器中相关页面内容。</p><blockquote><p>安装livereload浏览器扩展</p></blockquote><p>相关浏览器扩展的下载地址如下：</p><p><a href="http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions">browser extensions</a></p><blockquote><p>安装livereload server端</p></blockquote><p>安装python环境，然后在终端执行</p><pre><code>pip install livereload</code></pre><p>或者</p><pre><code>easy_install livereload</code></pre><blockquote><p>启动livereload server端</p></blockquote><p>假设我的代码目录在<code>/home/galendy/code/demo</code>，在终端执行</p><pre><code>livereload /home/galendy/code/demo</code></pre><blockquote><p>点击浏览器扩展</p></blockquote><p><code>livereload</code>的基本原理是：</p><pre><code>livereload server端会启动本地的socket服务（默认开放本地的35729端口），当监听的目录下的文件内容有变化时，向该socket写入数据livereload浏览器扩展会连接本地的35729端口，当有新消息到来时，会在浏览器中插入一段js代码，刷新当前页面</code></pre><p>实际上，前端工程师还会使用<code>livereload</code>完成css，js等文件的合并和压缩。想要了解更多，请参考：</p><p><a href="http://livereload.com/">livereload</a></p><p><a href="http://livereload.readthedocs.org/en/latest/">python livereload</a></p>]]></content>
    
    
    <summary type="html">使用livereload浏览器扩展，提升web前端开发工程师的开发效率，减少修改代码后需要重新刷新页面的工序</summary>
    
    
    
    <category term="collect" scheme="https://blog.gaoyuan.xyz/categories/collect/"/>
    
    
    <category term="php" scheme="https://blog.gaoyuan.xyz/tags/php/"/>
    
    <category term="collect" scheme="https://blog.gaoyuan.xyz/tags/collect/"/>
    
    <category term="python" scheme="https://blog.gaoyuan.xyz/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>互联网信息分类方法</title>
    <link href="https://blog.gaoyuan.xyz/2015/01/25/categorize-web-information/"/>
    <id>https://blog.gaoyuan.xyz/2015/01/25/categorize-web-information/</id>
    <published>2015-01-25T11:12:00.000Z</published>
    <updated>2025-06-09T23:54:02.606Z</updated>
    
    <content type="html"><![CDATA[<p>目前，虽然搜索已经代替分类目录（google颠覆yahoo模式）成为人们获取信息的主要途径，但是没有好的信息分类，再好的搜索也是白搭。只有信息足够格式化，标准化，搜索才有效。即分类提升展示逻辑，搜索输出内容结果。</p><span id="more"></span><h1 id="如何判定分类的好坏"><a href="#如何判定分类的好坏" class="headerlink" title="如何判定分类的好坏"></a>如何判定分类的好坏</h1><p>一个好的分类方法需要做到如下几点：</p><ul><li>能够涵盖集合中的所有元素</li><li>类和类之间不能重叠</li><li>能够比较容易地为每一个元素找到其对应的分类</li></ul><h1 id="常见的分类方法"><a href="#常见的分类方法" class="headerlink" title="常见的分类方法"></a>常见的分类方法</h1><h2 id="分类之前的准备工作"><a href="#分类之前的准备工作" class="headerlink" title="分类之前的准备工作"></a>分类之前的准备工作</h2><p>在对信息进行分类之前，可以先做如下几件事：</p><h5 id="1-明确如下问题"><a href="#1-明确如下问题" class="headerlink" title="1. 明确如下问题"></a>1. 明确如下问题</h5><p>信息如何产生？如何组织关联？通过什么渠道传播？</p><h5 id="2-观察别人"><a href="#2-观察别人" class="headerlink" title="2. 观察别人"></a>2. 观察别人</h5><p>可以去一家真正的商店看看，或者参观一座图书馆，还可以拜访竞争对手的商店。</p><h5 id="3-研究竞争对手"><a href="#3-研究竞争对手" class="headerlink" title="3. 研究竞争对手"></a>3. 研究竞争对手</h5><p>访问竞争对手的网站。他们是怎样组织信息的？要对多种组织方案加以比较。存在哪些相似之外？又有哪些区别？要尽量明确竞争对手为什么做出那样的选择。这是失误还是明智之举？你甚至可以对他们的网站做可用性测试，从而发现其组织方案中哪些方面奏效，哪些部分没有意义。</p><h2 id="常见的分类方法-1"><a href="#常见的分类方法-1" class="headerlink" title="常见的分类方法"></a>常见的分类方法</h2><h5 id="1-主题分类法"><a href="#1-主题分类法" class="headerlink" title="1. 主题分类法"></a>1. 主题分类法</h5><p>主题分类法的特征是选择某一个主题作为一阶类目，在一阶类目下又可分若干二阶类目，二阶类目下再分若干三阶类目，形成一个大的树形结构。同阶的类目按照字顺排序。</p><p>由于网络资源数不胜数，所以一般会选取14-24个热点事物作为一阶分类，分类的阶数为3到6级。</p><p>其优点是可以将事物相关的内容全部集中在一起。如汽车大类下可包含汽车制造，交易，保养，维修，赛车等等子类目。但是容量较小，对网络资源的覆盖率有限。</p><h5 id="2-分面分类法"><a href="#2-分面分类法" class="headerlink" title="2. 分面分类法"></a>2. 分面分类法</h5><p>分面分类法是根据实物都具有多维度的特征而建立的。可以将信息分成定义明确、互斥的区域。常见的是按字母顺序、按年表、按地理位置等分类。也可按照如下类型进行分类：</p><ul><li>按主题；设计时需要定义好内容的范围，注意涵盖面的广度</li><li>按任务；将内容和应用程序组织成流程、功能或工作的集合。最常见的是电商网站</li><li>按用户；如果用户群可以界定的比较清楚，可以提供很好的个性化服务，但模糊性依然存在，对系统“猜测”的要求很高</li><li>按隐喻；多用于游戏</li><li>混用以上类型</li></ul><h5 id="3-卡片分类法"><a href="#3-卡片分类法" class="headerlink" title="3. 卡片分类法"></a>3. 卡片分类法</h5><p>卡片分类就是把类似的东西放在一起。</p><ul><li>把你收集的各种信息整理出来写在卡片上。(如果没有，可以用一堆CD或者照片代替，可以是任何东西，只要数量足够多，可以零乱散落在地板上)</li><li>把所有卡片从盒子里倒在地板上。</li><li>把所有卡片从盒子里倒在地板上。</li><li>现在开始分组。如果你看到某些东西与另外一些东西相像，就把它们放在一起。</li><li>最后，当分组完毕时，再拿一些背面有胶的便条标出每一个堆的名称，分类完毕。</li></ul><h5 id="4-公众分类法"><a href="#4-公众分类法" class="headerlink" title="4. 公众分类法"></a>4. 公众分类法</h5><p>所谓”公众分类法”，就是由公众来为信息贴加标签（tagging），被使用最多的标签就最能说明这条信息的特点。</p><p>使用标签分类，非常的便捷，而且易于组合，但是也存在一些问题：</p><ul><li>不同的用户对相同的标签，往往有不同的理解，比如在”工具”标签下，可能会发现彼此完全没有关系的内容。</li><li>同义词问题。用户可能使用同义词作为标签，比如”tv&#x2F;television”，”Holland&#x2F;Netherlands&#x2F;Dutch”，”超级女生&#x2F;超女”。英语中，还存在复数问题。</li><li>词的多义性问题。比如”china”这个标签，到底指中国，还是指瓷器。</li><li>用户的标签五花八门，可能会产生大量”噪音”，加重系统负担，降低分类的准确性。</li></ul><p>所以，最好的解决方法应该是，自上而下的目录分类法与标签式的公众分类法相结合，然后对能够用作标签的词汇进行控制（controlled vocabulary），不能什么词都用来当标签。</p><h1 id="实施建议"><a href="#实施建议" class="headerlink" title="实施建议"></a>实施建议</h1><ul><li>尝试按照主题分类和分面分类发进行分类</li><li>试试卡片分类</li><li>使用2的标准去判定分类是否合理</li><li>如果单纯的分类无法解决问题，考虑下打标签（公众分类法）</li></ul><p>reference：</p><p>[^1] <a href="http://zhanglichuan.me/resolve-ia">http://zhanglichuan.me/resolve-ia</a></p><p>[^2] <a href="http://www.ruanyifeng.com/blog/2007/01/categories.html">http://www.ruanyifeng.com/blog/2007/01/categories.html</a></p><p>[^3] <a href="http://www.uegeek.com/reading/web_ia_note">http://www.uegeek.com/reading/web_ia_note</a></p>]]></content>
    
    
    <summary type="html">如何进行互联网信息分类，常见的信息分类方法</summary>
    
    
    
    <category term="collect" scheme="https://blog.gaoyuan.xyz/categories/collect/"/>
    
    
    <category term="web 信息架构 IA" scheme="https://blog.gaoyuan.xyz/tags/web-%E4%BF%A1%E6%81%AF%E6%9E%B6%E6%9E%84-IA/"/>
    
  </entry>
  
  <entry>
    <title>一周打造支付系统</title>
    <link href="https://blog.gaoyuan.xyz/2014/11/23/build-payment-system-in-one-week/"/>
    <id>https://blog.gaoyuan.xyz/2014/11/23/build-payment-system-in-one-week/</id>
    <published>2014-11-23T06:34:00.000Z</published>
    <updated>2025-06-09T23:54:02.606Z</updated>
    
    <content type="html"><![CDATA[<p>获取食物的最佳方式就是处于食物链的顶端，以捕食该链条之下的所有动植物。不言而喻，搭建处于资金流顶端的支付系统，伴随资金的转移过程，也是积累财富的绝佳手段。</p><span id="more"></span><h1 id="一般网购流程"><a href="#一般网购流程" class="headerlink" title="一般网购流程"></a>一般网购流程</h1><img src="/images/payment/shopping_flow.png" class="" title="shopping flow"><p>一般的网购流程如上图：</p><ul><li>商品筛选</li><li>将选中的商品添加到购物车（顾名思义，推着车去购物。如果只卖一个商品的话，可以省略这步）</li><li>确认要购买物品，去结算</li><li>下订单，即提交要结算物品的清单</li><li>网上支付该订单</li></ul><h1 id="支付流程"><a href="#支付流程" class="headerlink" title="支付流程"></a>支付流程</h1><img src="/images/payment/flow.jpg" class="" title="payment flow"><p>一个典型的支付流程如上图。</p><p>用户下单时，订单系统需要和产品库交互，生成支付连接。支付系统对请求地址进行验签之后，调用第三方平台的支付接口进行支付，然后更新订单状态。在订单成功支付之后，更新产品库存信息。</p><p>属于支付系统的功能有：</p><ul><li>请求参数验签</li><li>第三方支付接口对接</li><li>订单系统对接</li></ul><blockquote><p>只要完成与第三方支付接口的对接，即可解决搭建支付系统中最难啃的一块硬骨头。</p></blockquote><h1 id="第三方支付平台"><a href="#第三方支付平台" class="headerlink" title="第三方支付平台"></a>第三方支付平台</h1><p>目前比较流行的第三方支付平台主要有：</p><ul><li>支付宝</li><li>财付通</li><li>快钱</li><li>网银在线</li><li>微信支付</li></ul><p>对于网银支付，可以调用银联的接口，或者直接对接银行（可以降低手续费，支持大额等个性化支付方法。但是实现成本较高）。</p><p>虽然支付宝的手续费不是最实惠的，但是支付宝本身对接了个大银行的网银支付，而我们的目标是一周打造支付系统，当然选择最省事的。</p><p>对接支付宝支付接口的流程如下：</p><img src="/images/payment/zhifubao.jpg" class="" title="支付宝对接"><p>完成<code>技术集成</code>之前的工作，理论上需要8-10个工作日，所以需要提前申请。</p><p>最好找商务部的同事出马，不要怕麻烦boss。有问题，及时向组织反馈。</p><h1 id="支付宝接口"><a href="#支付宝接口" class="headerlink" title="支付宝接口"></a>支付宝接口</h1><p>与支付宝接口的交互流程如下</p><img src="/images/payment/zhifubao_flow.jpg" class="" title="支付宝接口交互流程"><p>支付宝提供的sdk，主要包含如下文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alipay_core.function.php -- 支付宝接口公用函数，是请求、通知返回两个文件所调用的公用函数核心处理文件</span><br><span class="line">alipay_md5.function.php  -- MD5加密</span><br><span class="line">alipay_notify.class.php  -- 支付宝通知处理类，处理支付宝各接口通知返回</span><br><span class="line">alipay_submit.class.php  -- 支付宝各接口请求提交类，构造支付宝各接口表单HTML文本，获取远程HTTP数据</span><br></pre></td></tr></table></figure><p><em>要调用的方法</em></p><ul><li>提交订单时，调用<code>alipay_submit.class.php</code>中的<code>buildRequestUrl</code>方法，同时，需要注册通知回调<code>return_url</code>和<code>notify_url</code>。</li></ul><p>其中：<br>    return_url是同步回调，一般用于在支付成功后，调转至支付成功页。<br>    notify_url是异步回调，一般用于更新订单状态等等（支付宝有相关队列服务运行异步回调，回调失败后，会以不定的间隔进行重试）。</p><ul><li>在通知回调时，都需要调用<code>alipay_notify.class.php</code>中的<code>verifyReturn</code>验证回调的合法性。</li></ul><h1 id="ssl证书"><a href="#ssl证书" class="headerlink" title="ssl证书"></a>ssl证书</h1><p>俗话说，没有买卖就没有杀戮。凡是涉及利益的地方，就不会很安全。使用采用http进行数据通讯，难免发生如下问题：</p><img src="/images/payment/http_flow.jpg" class="" title="中间人攻击"><p>但是换成https，会有如下好处：</p><img src="/images/payment/https_2.jpg" class="" title="http ssl"><img src="/images/payment/https_3.jpg" class="" title="https flow"><p>申请ssl证书，推荐数字公司使用的<a href="http://www.wosign.com/price.htm">WoSign超真 SSL</a>。</p><img src="/images/payment/ssl.jpg" class="" title="ssl"><h1 id="请求验签"><a href="#请求验签" class="headerlink" title="请求验签"></a>请求验签</h1><p>请求参数签名，需要使用可逆加密算法。其中又分为：</p><ul><li>对称加解密算法</li><li>非对称加解密算法</li></ul><p>对称加解密算法，在加密和解密时都使用一个密钥，加解密性能较好。但安全性较低（密钥只要被拿到，就gameover）。</p><p>非对称加解密算法，一般使用私钥加密，公钥解密。其安全性较好（只要保存好私钥就行），但是性能较差。</p><p>所以可以使用对称加解密算法加密请求参数。但加解密时，不使用同一个密钥。相关密钥，通过非对称加解密算法加密后，在请求参数中传递。</p><p>解密流程如下：<br>    1. 在请求参数中获取使用非对称加解密算法加密的密钥ekey<br>    2. 使用非对称加解密算法解密密钥ekey为dkey<br>    3. 使用对称加解密算法和dkey，解密请求参数</p><h1 id="订单"><a href="#订单" class="headerlink" title="订单"></a>订单</h1><p>我们用一周打造的支付系统，不能是一个远在云端的架构，而要是一个可运行的系统。那么，订单自然也少不了。</p><p>订单是按照如下对应关系产生的：</p><pre><code>用户 -&gt; 商品 -&gt; 订单</code></pre><p>在整个支付过程中，一般要存在两个订单号：</p><ul><li>用于在内部系统（订单，支付，个人中心）中流通的订单号 <code>order_no</code>，在每一次下单时产生。</li><li>用于支付的订单号 <code>pay_order_no</code>，由 <code>order_no</code> ＋ 时间戳 ＋ salt等，在每一次支付时产生。</li></ul><h1 id="联调部署"><a href="#联调部署" class="headerlink" title="联调部署"></a>联调部署</h1><p>开发阶段涉及的模块可做如下划分：</p><ul><li>产品页</li><li>支付页</li><li>支付</li><li>订单</li><li>个人中心</li><li>测试，部署上线</li></ul><p>衡量一个互联网的标准有：功能，交互，ui。</p><p>因为我们的目标是一周内打造支付，那么，优先是完成支付和订单。至于是否要在产品页添加购物车，是否要在订单支付页面保存配送地址，是否要在个人中心对接物流，以及退款等等，都可以暂时砍掉。</p><p>互联网产品，唯快不破。快速上线，快速迭代。</p><h1 id="The-Hole"><a href="#The-Hole" class="headerlink" title="The Hole"></a>The Hole</h1><p>开发过程中，难免会遇到不少坑，特此纪录，希望帮助有缘人。</p><ul><li>产品金额存储</li></ul><p>为了避免因退款，对账时，和银行或者第三方支付平台产生因为数据精度而舍入等问题，可以将产品金额以<code>分</code>为单位存储，前台展示时除以100。</p><ul><li>需要两个订单号</li></ul><p>支付宝等第三方平台，对订单号有验证，一个订单号只能支付一次。所以系统中需要存在两个订单号，一个用于内部系统流通，一个用于支付，每次支付时都产品一个最新的（与内部系统流通的订单号有对应关系）。</p><ul><li>权限验证</li></ul><p>下单，或者支付完成后，在个人中心等位置，一般可以查看订单状态。此时需要注意，需要增加权限验证。否则会产生平行权限安全漏洞（可查看别人的订单等信息）</p><ul><li>系统安全性</li></ul><p>在支付和个人中心等页面，因为存在前后端交互。所以需要排查，是否存在sql注入或者xss等安全漏洞。推荐<code>XSScrapy</code>和<code>SqlMap</code>。</p><ul><li>日志</li></ul><p>在整个交易过程中，需要有完善详尽的日志记录。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;获取食物的最佳方式就是处于食物链的顶端，以捕食该链条之下的所有动植物。不言而喻，搭建处于资金流顶端的支付系统，伴随资金的转移过程，也是积累财富的绝佳手段。&lt;/p&gt;</summary>
    
    
    
    <category term="php" scheme="https://blog.gaoyuan.xyz/categories/php/"/>
    
    
    <category term="php" scheme="https://blog.gaoyuan.xyz/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>使用graphite和cabot搭建监控服务</title>
    <link href="https://blog.gaoyuan.xyz/2014/10/01/use-graphite-and-alter-build-monitor-system/"/>
    <id>https://blog.gaoyuan.xyz/2014/10/01/use-graphite-and-alter-build-monitor-system/</id>
    <published>2014-10-01T01:43:00.000Z</published>
    <updated>2025-06-09T23:54:02.605Z</updated>
    
    <content type="html"><![CDATA[<p>说起监控，我们一般会首先想到<code>zabbix</code>，<code>nagios</code>，<code>ganglia</code>等等。但是对于非<code>ops</code>开发人员而言，这些东西，多多少少让人感到陌生。所以本文将从一个<code>服务端开发人员</code>的视角，介绍如何通过<code>graphite</code>，<code>cabot</code>，加一个<code>shell</code>定时脚本，搭建监控报警服务。</p><span id="more"></span><h1 id="python环境安装"><a href="#python环境安装" class="headerlink" title="python环境安装"></a>python环境安装</h1><p>虽然linux系统上一般都有python环境，但是默认的python版本较低。而且<code>yum</code>等系统工具，都依赖于默认的python。所以推荐的做法是再安装一个python，并使用<code>virtualenv</code>等工具，分项目进行环境管理，并与系统默认的python环境进行隔离。</p><p>以python2.7.3为例，介绍python环境的安装。</p><h2 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install bzip2-devel.x86_64</span><br><span class="line">sudo yum install sqlite-devel.x86_64</span><br><span class="line">sudo yum install readline-devel.x86_64</span><br><span class="line">sudo yum install openssl-devel.x86_64</span><br><span class="line"></span><br><span class="line">wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tar.bz2</span><br><span class="line">tar jxvf Python-2.7.3.tar.bz2</span><br><span class="line">cd Python-2.7.3</span><br><span class="line">./configure --prefix=/usr/local/python2.7.3</span><br><span class="line">make &amp;&amp; sudo make install</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line">wget https://pypi.python.org/packages/source/d/distribute/distribute-0.6.49.tar.gz --no-check-certificate</span><br><span class="line">tar zxvf distribute-0.6.49.tar.gz</span><br><span class="line">cd distribute-0.6.49</span><br><span class="line">sudo /usr/local/python2.7.3/bin/python setup.py install</span><br><span class="line">sudo /usr/local/python2.7.3/bin/easy_install pbr</span><br><span class="line"></span><br><span class="line">cd ..</span><br><span class="line">wget https://pypi.python.org/packages/source/v/virtualenv/virtualenv-1.10.1.tar.gz --no-check-certificate</span><br><span class="line">tar zxvf virtualenv-1.10.1.tar.gz</span><br><span class="line">cd virtualenv-1.10.1</span><br><span class="line">sudo /usr/local/python2.7.3/bin/python setup.py install</span><br><span class="line">sudo /usr/local/python2.7.3/bin/easy_install virtualenvwrapper</span><br></pre></td></tr></table></figure><blockquote><p>如果遇到 [FATAL] Failed to create text with cairo, this probably means cairo cant find any fonts. Install some system fonts and try again。可以尝试安装bitmap font。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install bitmap.x86_64</span><br><span class="line">sudo yum install bitmap-fonts-compat.noarch</span><br></pre></td></tr></table></figure><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><ul><li>创建管理python环境的用户</li></ul><p>为了便于环境的统一管理，创建一个普通用户进行新创建python环境的管理和相关python扩展的安装。同时，向数字公司的<code>addops</code>们致敬。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd appops</span><br></pre></td></tr></table></figure><ul><li>创建python环境安装目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /data/server/python-envs</span><br><span class="line">sudo chown -R appops.appops /data/server</span><br></pre></td></tr></table></figure><ul><li>配置新安装的python2.7.3环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su appops -c &#x27;vim ~/.bashrc&#x27;</span><br></pre></td></tr></table></figure><p>添加如下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export WORKON_HOME=/data/server/python-envs</span><br><span class="line">export VIRTUALENVWRAPPER_PYTHON=/usr/local/python2.7.3/bin/python</span><br><span class="line">export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/python2.7.3/bin/virtualenv</span><br><span class="line">source /usr/local/python2.7.3/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure><h1 id="搭建graphite监控服务"><a href="#搭建graphite监控服务" class="headerlink" title="搭建graphite监控服务"></a>搭建graphite监控服务</h1><h2 id="安装步骤-1"><a href="#安装步骤-1" class="headerlink" title="安装步骤"></a>安装步骤</h2><ul><li>创建安装目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /opt/graphite</span><br><span class="line">sudo chown -R appops.appops /opt/graphite</span><br></pre></td></tr></table></figure><ul><li>创建python虚拟环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo su appops</span><br><span class="line">source ~/.bashrc</span><br><span class="line">mkvirtualenv graphite</span><br></pre></td></tr></table></figure><ul><li>graphite安装</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pip install whisper</span><br><span class="line">pip install carbon</span><br><span class="line">pip install graphite-web</span><br><span class="line">pip install django==1.5</span><br><span class="line">pip install django-tagging</span><br><span class="line">pip install uwsgi</span><br><span class="line">pip install MySQL-python</span><br><span class="line">pip install daemonize</span><br></pre></td></tr></table></figure><p>graphite使用<code>cairo</code>进行绘图，由于系统自带的cairo版本较低（需要cairo1.10以上），使用pip安装cairo会出错，所以采用编译安装。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget http://cairographics.org/releases/pycairo-1.8.8.tar.gz</span><br><span class="line">tar zxvf pycairo-1.8.8.tar.gz</span><br><span class="line">python -c &quot;import sys; print sys.prefix&quot;</span><br><span class="line">cd pycairo-1.8.8</span><br><span class="line">./configure --prefix=/data/server/python-envs/graphite</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><ul><li>目录说明</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bin -- 数据收集相关工具</span><br><span class="line">conf -- 数据存储相关配置文件</span><br><span class="line">    carbon.conf -- 数据收集carbon进程涉及的配置</span><br><span class="line">    dashboard.conf -- Dashboard UI相关配置</span><br><span class="line">    graphite.wsgi -- wsgi相关配置</span><br><span class="line">    storage-schemas.conf -- Schema definitions for Whisper files</span><br><span class="line">    whitelist.conf -- 定义允许存储的metrics白名单</span><br><span class="line">    graphTemplates.conf -- 图形化展示数据时使用的模板</span><br><span class="line">examples -- 示例脚本</span><br><span class="line">lib -- carbon和twisted库</span><br><span class="line">storage -- 数据文件存储目录</span><br><span class="line">webapp -- 数据前端展示涉及程序</span><br></pre></td></tr></table></figure><h2 id="配置Graphite-web"><a href="#配置Graphite-web" class="headerlink" title="配置Graphite-web"></a>配置Graphite-web</h2><ul><li>初始化配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /opt/graphite/webapp/graphite</span><br><span class="line">cp local_settings.py.example local_settings.py</span><br><span class="line">cp /opt/graphite/conf/graphite.wsgi.example /opt/graphite/conf/graphite.wsgi</span><br><span class="line">cp /opt/graphite/conf/graphTemplates.conf.example /opt/graphite/conf/graphTemplates.conf</span><br><span class="line">cp /opt/graphite/conf/dashboard.conf.example /opt/graphite/conf/dashboard.conf</span><br></pre></td></tr></table></figure><p>修改或者增加如下配置：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TIME_ZONE</span><br><span class="line">DEBUG</span><br><span class="line">SECRET_KEY</span><br><span class="line">DATABASES</span><br></pre></td></tr></table></figure><p>示例配置文件<a href="https://gist.github.com/jqlblue/88f8a9b14bbe4bae3666">local_settings.py</a></p><ul><li>初始化数据库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py syncdb</span><br></pre></td></tr></table></figure><ul><li>启动graphite-web</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uwsgi --http localhost:8085 --master --processes 1 --home /data/server/python-envs/graphite --pythonpath /opt/graphite/webapp/graphite --wsgi-file=/opt/graphite/conf/graphite.wsgi --enable-threads --thunder-lock</span><br></pre></td></tr></table></figure><img src="/images/graphite/web.jpg" class="" title="graphite web"><h2 id="配置数据收集服务"><a href="#配置数据收集服务" class="headerlink" title="配置数据收集服务"></a>配置数据收集服务</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp /opt/graphite/conf/carbon.conf.example /opt/graphite/conf/carbon.conf</span><br><span class="line">cp /opt/graphite/conf/storage-schemas.conf.example /opt/graphite/conf/storage-schemas.conf</span><br><span class="line">cp /opt/graphite/conf/whitelist.conf.example /opt/graphite/conf/whitelist.conf</span><br></pre></td></tr></table></figure><p>编辑<code>/opt/graphite/lib/carbon/util.py</code>，将</p><pre><code>from twisted.scripts._twistd_unix import daemonize</code></pre><p>替换成</p><pre><code>import daemonize</code></pre><p>否则启动cabon时会遇到<code>ImportError: cannot import name daemonize</code>。</p><ul><li>配置存储白名单</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/graphite/conf/whitelist.conf</span><br></pre></td></tr></table></figure><p>添加</p><pre><code>^test\..*^server\..*</code></pre><p>即只存储以<code>test.</code>和<code>server.</code>开头的metrics。</p><ul><li>配置存储Schemas</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/graphite/conf/storage-schemas.conf</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[server]</span><br><span class="line">pattern = ^server\..*</span><br><span class="line">retentions = 60s:1d,5m:7d,15m:3y</span><br><span class="line"></span><br><span class="line">[default]</span><br><span class="line">pattern = ^test\..*</span><br><span class="line">retentions = 60s:1d,5m:7d</span><br></pre></td></tr></table></figure><p>上面的配置，会对于<code>test.</code>开头的metrics，以60秒为精度存储一天，以5分钟为精度存储7天。即查询一天内的数据时，可以精确到1分钟，查询7天内的数据时，只能精确到5分钟。</p><ul><li>启动cabon</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python /opt/graphite/bin/carbon-cache.py --config=/opt/graphite/conf/carbon.conf --debug start</span><br></pre></td></tr></table></figure><h1 id="收集监控数据"><a href="#收集监控数据" class="headerlink" title="收集监控数据"></a>收集监控数据</h1><p>etsy开源了一个叫<a href="https://github.com/etsy/statsd">statsd</a>的daemon，可用于将监控数据收集到graphite，但那玩意是nodejs写的。</p><p>为了保持方案的简单，采用<code>crontab</code>的方式，利用<a href="https://gist.github.com/jqlblue/c7473473f8a7357167b8">shell脚本</a>将要收集的数据通过udp协议直接发送至graphite。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line"></span><br><span class="line">HOST=$(hostname | awk -F&#x27;.&#x27; &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">IDC=&quot;local&quot;</span><br><span class="line"></span><br><span class="line">SYSTEM_LOAD=$(awk &#x27;&#123;print $1&#125;&#x27; /proc/loadavg)</span><br><span class="line">SYSTEM_MEMORY_FREE=$(free -m | grep &#x27;buffers/cache&#x27; | awk &#x27;&#123;print $NF&#125;&#x27;)</span><br><span class="line">SYSTEM_SWAP_USE=$(free -m | grep &#x27;Swap&#x27; | awk &#x27;&#123;print $(NF-1)&#125;&#x27;)</span><br><span class="line">SYSTEM_DISK_USED=$(df -h | grep &#x27;/&#x27; | awk &#x27;BEGIN&#123;_max=0&#125;&#123;len=length($5);i=substr($5,0,len-1);if(_max&lt;i)&#123;_max=i&#125;&#125;END&#123;print _max&#125;&#x27;)</span><br><span class="line"></span><br><span class="line">TIMESTAMP=$(date +%s)</span><br><span class="line"></span><br><span class="line">### send to garphite through udp port 2003 ########</span><br><span class="line">echo -n &quot;server.$IDC.$HOST.system.load $SYSTEM_LOAD $TIMESTAMP&quot; &gt; /dev/udp/127.0.0.1/2003</span><br><span class="line">echo -n &quot;server.$IDC.$HOST.system.memory_free $SYSTEM_MEMORY_FREE $TIMESTAMP&quot; &gt; /dev/udp/127.0.0.1/2003</span><br><span class="line">echo -n &quot;server.$IDC.$HOST.system.swap_used $SYSTEM_SWAP_USED $TIMESTAMP&quot; &gt; /dev/udp/127.0.0.1/2003</span><br><span class="line">echo -n &quot;server.$IDC.$HOST.system.disk_used $SYSTEM_DISK_USED $TIMESTAMP&quot; &gt; /dev/udp/127.0.0.1/2003</span><br></pre></td></tr></table></figure><img src="/images/graphite/data-view.jpg" class="" title="graphite monitor data view"><p><em>监控数据收集和展示流图</em></p><img src="/images/graphite/data-flow.jpg" class="" title="graphite monitor data flow"><h1 id="搭建cabot报警服务"><a href="#搭建cabot报警服务" class="headerlink" title="搭建cabot报警服务"></a>搭建cabot报警服务</h1><p><code>cabot</code>是一个轻量级的监控报警服务。其报警可以基于：</p><pre><code>graphite收集的监控数据url的响应内容和状态码jenkins编译任务的状态</code></pre><ul><li>安装依赖</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gem sources --remove http://rubygems.org/</span><br><span class="line">sudo gem sources -a http://ruby.taobao.org/</span><br><span class="line">sudo gem install foreman</span><br></pre></td></tr></table></figure><blockquote><p>因为foreman要求ruby版本需要在1.9.3以上，如果系统自带ruby版本过低，可以通过rvm安装ruby，再安装foreman。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install npm</span><br><span class="line">sudo npm install -g coffee-script less@1.3 --registry http://registry.npmjs.org/</span><br></pre></td></tr></table></figure><ul><li>初始化目录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo su appops</span><br><span class="line">mkdir /data/server/alter</span><br><span class="line">cd /data/server/alter</span><br><span class="line">mkvirtualenv cabot</span><br></pre></td></tr></table></figure><ul><li>安装cabot</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/arachnys/cabot.git</span><br><span class="line">cd cabot</span><br><span class="line">cp conf/development.env.example conf/development.env</span><br></pre></td></tr></table></figure><p>修改<a href="https://gist.github.com/jqlblue/165d50a949cd4aae2191">setup.py</a>，添加</p><pre><code>&#39;MySQL-python==1.2.5&#39;,</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python setup.py install</span><br><span class="line">/bin/sh ./setup_dev.sh</span><br></pre></td></tr></table></figure><ul><li>配置cabot</li></ul><p>使用foreman启动cabot时，会先读取<code>.foreman</code></p><pre><code># vi: set ft=yaml :procfile: Procfile.devenv: conf/development.env</code></pre><p><code>Procfile.dev</code>内容如下：<br>    web:       python manage.py runserver 0.0.0.0:$PORT<br>    celery:    celery -A cabot worker –loglevel&#x3D;DEBUG -B -c 8 -Ofair</p><p>其中定义了启动cabot-web和celery任务队列时使用的命令，针对不同的环境，可以酌情修改<code>.foreman</code>和对应的<code>procfile</code>及<code>env</code>。</p><p>对于邮件报警，需要修改<a href="https://gist.github.com/jqlblue/a6329a7649be16e92df4">conf&#x2F;development.env</a>中的如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DATABASE_URL -- 数据库配置</span><br><span class="line">TIME_ZONE -- 时区</span><br><span class="line">ADMIN_EMAIL</span><br><span class="line">CABOT_FROM_EMAIL</span><br><span class="line">CELERY_BROKER_URL -- celery任务队列配置</span><br><span class="line">SES_HOST -- smtp host</span><br><span class="line">SES_USER -- 发送邮件的用户</span><br><span class="line">SES_PASS -- 发送邮件用户的密码</span><br><span class="line">SES_PORT -- smtp port</span><br></pre></td></tr></table></figure><ul><li>启动cabot</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup foreman start 2&gt;&amp;1 &gt; /dev/null &amp;</span><br></pre></td></tr></table></figure><img src="/images/graphite/cabot_service.jpg" class="" title="cabot service"><img src="/images/graphite/cabot_service_check.jpg" class="" title="cabot service check"><img src="/images/graphite/cabot_service_check_detail.jpg" class="" title="cabot service check detail"><p>reference：</p><p>[^1] <a href="http://graphite.readthedocs.org/en/latest/overview.html">http://graphite.readthedocs.org/en/latest/overview.html</a></p><p>[^2] <a href="http://cabotapp.com/qs/quickstart.html">http://cabotapp.com/qs/quickstart.html</a></p><p>[^3] <a href="https://gist.github.com/jirutka/8636572">https://gist.github.com/jirutka/8636572</a></p>]]></content>
    
    
    <summary type="html">如何使用python实现的开源系统graphite搭建监控系统，并结合定时任务，收集服务器和webserver运行状态，配合cabot进行相关监控数值的报警</summary>
    
    
    
    <category term="devops" scheme="https://blog.gaoyuan.xyz/categories/devops/"/>
    
    
    <category term="devops" scheme="https://blog.gaoyuan.xyz/tags/devops/"/>
    
    <category term="monitor" scheme="https://blog.gaoyuan.xyz/tags/monitor/"/>
    
  </entry>
  
  <entry>
    <title>电商相关概念整理</title>
    <link href="https://blog.gaoyuan.xyz/2014/09/22/e-commerce-idea-collection/"/>
    <id>https://blog.gaoyuan.xyz/2014/09/22/e-commerce-idea-collection/</id>
    <published>2014-09-22T02:24:00.000Z</published>
    <updated>2025-06-09T23:54:02.604Z</updated>
    
    <content type="html"><![CDATA[<h2 id="电子商务模式"><a href="#电子商务模式" class="headerlink" title="电子商务模式"></a>电子商务模式</h2><p>电子商务模式是指企业运用互联网，通过基于一定技术基础的商务运作方式开展经营取得营业收入的基本方式。</p><span id="more"></span><p>主要可以分为以下四种类型：</p><ul><li>B2C（Business to Consumer），即企业与消费者之间的电子商务，如京东。</li><li>B2B（Business to Business），即企业与企业之间的电子商务，如阿里巴巴</li><li>C2C（Consumer to Consumer），即消费者与消费者之间的电子商务，如淘宝。</li><li>O2O（Online To Offline），即线下商务与互联网之间的电子商务，如美乐乐，其O2O模式具体表现为线上家具网与线下体验馆的双平台运营。</li></ul><p>C2C商务平台就是通过为买卖双方提供一个在线交易平台，使卖方可以主动提供商品上网拍卖，而买方可以自行选择商品进行竞价。</p><p>O2O模式下，线下服务就可以用线上来揽客，消费者可以用线上来筛选服务，还有成交可以在线结算，很快达到规模。该模式最重要的特点是：推广效果可查，每笔交易可跟踪</p><h2 id="电商网站解决方案"><a href="#电商网站解决方案" class="headerlink" title="电商网站解决方案"></a>电商网站解决方案</h2><p>电商网站中 C 端用户操作路径大致如下：</p><pre><code>商品浏览 -》 下单 -》支付 -》订单查看 -》退货</code></pre><p>结合 B 端用户的操作，整套电商系统会涉及：</p><h3 id="前台系统"><a href="#前台系统" class="headerlink" title="前台系统"></a>前台系统</h3><ul><li>产品展示</li><li>个人中心（支付，订单，购物车，积分系统）</li><li>搜索，推荐</li><li>用户反馈交流（客服系统，社区）</li></ul><h3 id="运营管理后台"><a href="#运营管理后台" class="headerlink" title="运营管理后台"></a>运营管理后台</h3><ul><li>商品管理</li><li>商户管理</li><li>库存管理</li><li>支付管理</li><li>订单管理</li><li>配送物理管理</li><li>用户权限管理</li><li>数据统计分析</li><li>营销推广管理，如SEO，促销，广告</li><li>前台内容管理系统</li></ul><h3 id="基础服务"><a href="#基础服务" class="headerlink" title="基础服务"></a>基础服务</h3><ul><li>数据存储（日志，图片，商品信息）</li><li>监控报警</li><li>日志收集</li><li>消息系统</li><li>队列服务</li></ul><p>会员通过推荐，搜索，分类检索等功能，进行商品的浏览。通过浏览，会员将感兴趣的商品加入购物车，并进行支付处理。</p><p>会员在个人中心可以查看相关订单的处理状态，如：是否支付成功，是否配送等信息。对于不满意的商品，可以进行退换货处理。</p><p>在B 端的管理后台，有相关权限的管理员，可以进行商品管理，对订单进行处理。结合统计分析和营销推广，评出热销商品等等。</p><h3 id="可供参考的系统架构示例"><a href="#可供参考的系统架构示例" class="headerlink" title="可供参考的系统架构示例"></a>可供参考的系统架构示例</h3><img src="/images/e-commerce/e_1.png" class="" title="电商平台基础技术架构"><img src="/images/e-commerce/e_2.png" class="" title="电商平台技术架构"><img src="/images/e-commerce/e_3.png" class="" title="电商平台系统图"><h2 id="技术架构非功能性指标"><a href="#技术架构非功能性指标" class="headerlink" title="技术架构非功能性指标"></a>技术架构非功能性指标</h2><h3 id="1-系统效率"><a href="#1-系统效率" class="headerlink" title="1. 系统效率"></a>1. 系统效率</h3><ul><li>空间换时间（多级缓存，静态化，索引）</li><li>并行与分布式计算（map-reduce，多线程，多进程）</li></ul><h3 id="2-可扩展性"><a href="#2-可扩展性" class="headerlink" title="2. 可扩展性"></a>2. 可扩展性</h3><ul><li>系统无状态</li><li>拆分（分库，分表（水平，垂直））</li></ul><h3 id="3-安全性"><a href="#3-安全性" class="headerlink" title="3. 安全性"></a>3. 安全性</h3><ul><li>数据存储安全，如增量，全量备份，异机备份。</li><li>数据传输安全，ssl&#x2F;tls，加解密（对称，非对称）。</li><li>网络安全，数据库与外网隔离，确保不被恶意攻击</li><li>安全审计、操作日志记录。</li></ul><h3 id="4-可用性"><a href="#4-可用性" class="headerlink" title="4. 可用性"></a>4. 可用性</h3><ul><li>负载均衡（lvs，keepalived）</li><li>多写分离，主从切换，failover</li><li>应急预案和系统预警</li><li>系统降级（功能和品质）</li><li>系统限流（过载保护）</li></ul><h2 id="电商的特点"><a href="#电商的特点" class="headerlink" title="电商的特点"></a>电商的特点</h2><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>人们不受时间的限制，不受空间的限制，不受传统购物的诸多限制，可以随时随地在网上交易。通过跨越时间、空间，使我们在特定的时间里能够接触到更多的客户，为我们提供了更广阔的发展环境。</p><h3 id="市场"><a href="#市场" class="headerlink" title="市场"></a>市场</h3><p>在网上这个世界将会变得很小，一个商家可以面对全球的消费者，而一个消费者可以在全球的任何一家商家购物。一个商家可以去挑战不同地区、不同类别的买家客户群，在网上能够收集到丰富的买家信息，进行数据分析。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>电子商务减少了商品流通的中间环节，节省了大量的开支，从而也大大降低了商品流通和交易的成本。通过电子商务，企业能够更快的匹配买家，实现真正的产-供-销一体化，能够节约资源，减少不必要的生产浪费。</p><h3 id="劣势"><a href="#劣势" class="headerlink" title="劣势"></a>劣势</h3><p>服务质量参差不齐。配送、安装、产品退换货、维修等客服环节需要完善。</p><h2 id="电商的本质"><a href="#电商的本质" class="headerlink" title="电商的本质"></a>电商的本质</h2><p>电商首先重在“商”，而不在“电”。</p><p>这意味着电商还是企业经济学，电商还是要讲效益，讲利润，讲责任。但另一方面更重要，电商有自己的特点，它是信息化技术的重新架构，它成就的不仅仅是渠道，而是一种管理模式，甚至是一种战略规则，其未来基本形态或最高形态，不应是单纯的销售，而是点对点的服务，通过企业直接面对单个消费者，提供个性化的服务，从而开启企业发展的新时代。</p><h3 id="首先，电商应重新确立消费者地位"><a href="#首先，电商应重新确立消费者地位" class="headerlink" title="首先，电商应重新确立消费者地位"></a>首先，电商应重新确立消费者地位</h3><p>消费者是品牌的上帝，但如何真正把这理念通过一定方法来实现，却一直没有找到更直接更完备的答案。信息化为这个问题带来了新曙光。通过电商窗口，消费者可进行自我颜色设计、款式设计以及搭配设计；在生产过程中，也可以进一步和消费者沟通；而这本身就是一个巨大的营销过程。消费者穿在身上的服装，绝不会再撞衫，它是独一的，代表着自己心境和思想的，是最受消费者欢迎的。</p><h3 id="其次，电商应重新塑造产业生态"><a href="#其次，电商应重新塑造产业生态" class="headerlink" title="其次，电商应重新塑造产业生态"></a>其次，电商应重新塑造产业生态</h3><p>低价是不可持续的，企业必须有相对充足利润，并促进上下游乃至生态的良好发展。靠资本投资打价格战，一时可以，不可一世；靠截取供应商利润，一次可以，不可永续；一个电商靠价格战可以，但一个行业这样则不正常。笔者认为，通过企业点对点的服务，可以获得相对高的利润，这不仅可以加速电商本身的创新，更重要的是让上下游企业有良好的利润来源，一旦这样的生态链条生成，那么其竞争力则是巨大的、持续的、有良好的前景的。</p><h3 id="再次，电商应重新构建经济理论和品牌法则"><a href="#再次，电商应重新构建经济理论和品牌法则" class="headerlink" title="再次，电商应重新构建经济理论和品牌法则"></a>再次，电商应重新构建经济理论和品牌法则</h3><p>现在流行的经济理论和品牌法则，大多诞生在传统经济时代或信息化萌芽之时，均是那个时代的产物，更大程度上适应那个时代发展条件。比如，如果采用大众化定制，消费者会更广泛，类别更复杂，消费心理也会发生巨大变化，如果还一味墨守原来的定位法则，想必一定就刻舟求剑了。所以要在新时代里，一定要探寻定位的新内涵，寻找适合信息化时代的新方法，适合自己的新方法，通过不断创新实践，为丰富和扩展企业理论和品牌法则做出新尝试。</p><p>总之，电商本身就是一种创造，本质要求提升商业形态和价值，如果只是打价格战，那就是南辕北辙了。</p><h2 id="相关业务战略架构"><a href="#相关业务战略架构" class="headerlink" title="相关业务战略架构"></a>相关业务战略架构</h2><h3 id="1-服务对象"><a href="#1-服务对象" class="headerlink" title="1. 服务对象"></a>1. 服务对象</h3><p>企业战略规划从选择客户开始。如1号店成立之初，服务对象是超市人群中的网络人群，所以去家乐福等的线下人群才是相关核心主攻人群，而非泛人群。</p><h3 id="2-价值提供"><a href="#2-价值提供" class="headerlink" title="2. 价值提供"></a>2. 价值提供</h3><p>确定顾客定位后，就要解决为什么顾客要从你这里购买而非竞争对手处购买的价值定位。</p><p>1号店成立之初，从多种价值里最后选择了3个顾客价值：</p><ul><li><p>优惠价格</p></li><li><p>良好用户体验</p></li><li><p>未满足的品类需求（提供食品饮料，母婴这些当时竞争对手都不涉及的产品线）</p></li></ul><p>选择定位时，一定需要按照：</p><ul><li><p>竞争对手不足</p></li><li><p>能消费者需求</p></li><li><p>对相关领域比较擅长，有优势，自身能做好</p></li></ul><p>将这三者结合，产生一个清晰的价值定位，就可以以小博大。1号店启动时候只用了非常有限的资金，但假设一开始就博大，业务、资金、时间都分散，就没有今天了。</p><h3 id="3-输出结果为产品、信息和服务"><a href="#3-输出结果为产品、信息和服务" class="headerlink" title="3. 输出结果为产品、信息和服务"></a>3. 输出结果为产品、信息和服务</h3><p>产品线定位确定之后，就要进行了收缩。</p><p>1号店业务初期先保留了食品饮料、母婴、美容和家居四类，剔除了图书、服装等产品线，聘用了大量的兼职大学生协助产品经 理完善商品在网上的表现力，同时于刚董事长异常重视用户体验反馈，每天通过公司系统中消费者反馈第一时间解决来自各个部门的问题，这也是1号店能快速成长的一个重要原因，因为有效的企业更多是通过和终端顾客对话来解决企业内部的部门问题，而非公司高管自己拍脑袋决策。</p><h3 id="4-资源资产能力"><a href="#4-资源资产能力" class="headerlink" title="4. 资源资产能力"></a>4. 资源资产能力</h3><p>表现为知识和权利领域。</p><p>1号店通过人力经理的辛苦搜索，找到了各部门的领导者，所以成立初期，很快网络了一批各行业的人才来推动业务发展。组织资本上，申请大量的技术专利，对1号店品牌商标保护等。关系资本上，1号店迅速和行业合作伙伴建立战略合作关系，虽然当时业务很小，但创始人用公司的美好发展愿景和优秀团队两个武器和各个合作伙伴建立了战略合作关系，比如从上海的物流合作商特能处取得了行业最低的每单配送价格。</p><h3 id="5-流程"><a href="#5-流程" class="headerlink" title="5. 流程"></a>5. 流程</h3><p>就是解决系统层面做什么。</p><p>1号店当时IT人员数量是各部门之最，开发了很多系统，管理上也是制度系统比人重要，各部门周二的KPI会议上负责人都用部门量化的KPI业绩来沟通业务的机会和挑战以及改进方案。这几年来，虽然1号店人员流失率颇高，但业务还是持续增长，这也是创始人对系统的重视是一个重要原因。</p><h3 id="6-合作伙伴"><a href="#6-合作伙伴" class="headerlink" title="6. 合作伙伴"></a>6. 合作伙伴</h3><p>合作伙伴分为纵向和横向合作伙伴。</p><p>为业务直接带来业绩的为上下游的合作伙伴，上游供应商有宝洁等货品供应商，下游有平安客流伙伴，特能是物流伙伴，普洛斯园区则提供良好的仓储伙伴。</p><p>目前沃尔玛入股1号店，应该可以从很多方面提供1号店的运营能力。而横向合作伙伴，定义为可以帮助公司间接提高产品服务价值和维系良好客户关系的供应商，比如听说1号店2012年起聘专业的客户关系维系公司来帮助提升客户关系管理等措施就是良好运用横向伙伴技巧。不和风投随意洽谈，从一开始就找能给自己真正带来业务提升的战略投资者。</p><h3 id="7-获利模式"><a href="#7-获利模式" class="headerlink" title="7. 获利模式"></a>7. 获利模式</h3><p>目前电商越大越亏损，因为还在圈地时期。一个不注重盈利也解释不清楚未来盈利模式都是违背商业本质。而真正好的利润是持续长久的，不是圈钱短视，否则必有后患，好的利润模式也不是眼球经济，而应可持续发展。</p><h3 id="8-收入增长方式"><a href="#8-收入增长方式" class="headerlink" title="8. 收入增长方式"></a>8. 收入增长方式</h3><p>收入增长模式可以分为客户轴，产品轴和位置轴。</p><p>客户轴可以供应给个人消费者的有形产品外，1号店还提供了手机充值等无形服务产品来增加客户粘性，当然成立之初就实施的针对企业的团购也给1号店带来了一 定比例的收入。</p><p>产品轴是随着公司发展逐渐增加，各平台电商公司虽然都是从不同产品线起家，但最后基本会殊途同归，品类扩充是必由之路，但必须有节奏感和清晰的定位分析，否则会出现凡客去年的产品扩充问题。</p><p>最后是位置轴，全国布局一定是逐步实现，是规模做大的桥头堡，但需要资本背后支持。</p><p>reference：</p><p>[^1] <a href="http://mp.weixin.qq.com/s?__biz=MzA4ODI4NjMwMQ==&mid=10000072&idx=2&sn=89dbb533dd9bfd0f0900fc2ad2504e6c&3rd=MzA3MDU4NTYzMw==&scene=6#rd">电子商务不得不了解的模式</a></p><p>[^2] <a href="http://mp.weixin.qq.com/mp/appmsg/show?__biz=MjM5MzY2NTEyMw==&appmsgid=10013152&itemidx=1&sign=6fa1962f942a1804368e3e22c393c934&3rd=MzA3MDU4NTYzMw==&scene=6#wechat_redirect">电商的本质</a></p><p>[^3] <a href="http://mp.weixin.qq.com/s?__biz=MzA4MTcxNzgzMQ==&mid=200319772&idx=5&sn=d8e44444b80d633dbc56f5ee6ab5de5a&3rd=MzA3MDU4NTYzMw==&scene=6#rd">以1号店为例，解析企业电子商务8步业务战略架构</a></p><p>[^4] <a href="http://mp.weixin.qq.com/s?__biz=MjM5MjEwMTk1OQ==&mid=200031802&idx=1&sn=fec76ef0b002c7d41c91d746a07ee0c9&3rd=MzA3MDU4NTYzMw==&scene=6#rd">电子商务模式下如何进行客户关系管理</a></p><p>[^5] <a href="http://blog.csdn.net/yangbutao/article/details/12242441">构建高并发高可用的电商平台架构实践</a></p>]]></content>
    
    
    <summary type="html">电商平台涉及相关的概念，业务架构，技术架构，电商本质，优势，劣势</summary>
    
    
    
    <category term="collect" scheme="https://blog.gaoyuan.xyz/categories/collect/"/>
    
    
    <category term="Architecture" scheme="https://blog.gaoyuan.xyz/tags/Architecture/"/>
    
  </entry>
  
  <entry>
    <title>在linux服务器之间同步用户账号</title>
    <link href="https://blog.gaoyuan.xyz/2014/08/02/synchronization-user-account-on-linux/"/>
    <id>https://blog.gaoyuan.xyz/2014/08/02/synchronization-user-account-on-linux/</id>
    <published>2014-08-02T09:26:00.000Z</published>
    <updated>2025-06-09T23:54:02.603Z</updated>
    
    <content type="html"><![CDATA[<p>最近负责运帷的同事离职了，原先由运帷可以一手搞定的事情，分摊到了几个研发同事的身上。但是多人公用一个账号，实在感觉不爽。</p><span id="more"></span><p>由于公司没有几台服务器上，所以可以逐一登录服务器创建新账号。但是对于一个码农而言，这不科学，它违背了<code>DRY</code>原则。</p><p>当然，也可以配置一个ldap服务器，修改linux用户登录使用ldap验证。但这让我有一种从火窟跳到冰窖的感觉。先不说是否能搞定配置的事情，引入的这个ldap，又会变成另外一个坑。</p><p>昨天听一个同事时，我们来上班，要对得起自己的良心。所以我不能让上班时间在纠结中度过，用土方法解决问题先。</p><h2 id="同步步骤"><a href="#同步步骤" class="headerlink" title="同步步骤"></a>同步步骤</h2><p>因为目前有一台服务器是登录的跳板机，所以只需要在跳板机上创建好新账号，然后把用户账号同步到其他机器上就好。</p><blockquote><p>如果没有跳板机，也可以随便选一台服务器（A），在A服务器上创建账号，并同步到其他机器上。</p></blockquote><ul><li><p>在跳板机上创建用户账号</p></li><li><p>在要同步的服务器上创建账号，并将该用户在跳板机上如下文件中对于的条目追加到要同步到机器上</p></li></ul><p><code>/etc/passwd</code>， <code>/etc/group</code>, <code>/etc/shadow</code></p><p>以跳板机ip：<code>192.168.1.1</code>，要同步的服务器：<code>192.168.1.8</code>，新增用户名：<code>jqlblue</code>为例，登录跳板机执行：</p><pre><code>$ useradd jqlblue$ ssh -l root -p 22 192.168.1.8 &quot;useradd jqlblue&quot;$ grep jqlblue: /etc/group | xargs -I &#123;&#125; ssh -l root -p 22 192.168.1.8 &quot;echo &#123;&#125; &gt;&gt; /etc/group&quot;$ grep jqlblue: /etc/passwd | xargs -I &#123;&#125; ssh -l root -p 22 192.168.1.8 &quot;echo &#123;&#125; &gt;&gt; /etc/passwd&quot;$ grep jqlblue: /etc/shadow | xargs -I &#123;&#125; ssh -l root -p 22 192.168.1.8 &quot;echo &#123;&#125; &gt;&gt; /etc/shadow&quot;</code></pre><p>上述操作，编写成脚本即可。当需要新增或者修改用户时，只需在跳板机上进行操作，同步问题，由脚本来完成。</p><p><em>上述脚本要在生产环境使用，需要注意如下问题：</em><br>    1 新增用户时，uid或者gid重复的问题<br>    2 修改用户密码或者组信息后，产生多条记录的问题</p>]]></content>
    
    
    <summary type="html">如何在多台linux服务器之间同步用户账号，linux操作系统用户登录过程解析</summary>
    
    
    
    <category term="linux" scheme="https://blog.gaoyuan.xyz/categories/linux/"/>
    
    <category term="devops" scheme="https://blog.gaoyuan.xyz/categories/linux/devops/"/>
    
    
    <category term="linux" scheme="https://blog.gaoyuan.xyz/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>手动刷入android 4.4.3 OTA 更新包</title>
    <link href="https://blog.gaoyuan.xyz/2014/06/08/manual-update-android-ota-update/"/>
    <id>https://blog.gaoyuan.xyz/2014/06/08/manual-update-android-ota-update/</id>
    <published>2014-06-07T22:35:00.000Z</published>
    <updated>2025-06-09T23:54:02.602Z</updated>
    
    <content type="html"><![CDATA[<p>今天上午，nexus4终于收到了google android 4.4.3 的ota更新包，但是从上午到晚上，愣是没有下载下来。这就像因为长智齿而牙龈肿痛的你被人请吃麻辣香锅那样难受。</p><span id="more"></span><p>作为一个吃货，怎么能受得了这份煎熬？就算用半边牙齿，也不能虚此行。</p><p>当然，作为码农。就算被铜墙铁壁包围，也要想办法越过长城，对世界说出那句“hello world”。</p><h1 id="诊断"><a href="#诊断" class="headerlink" title="诊断"></a>诊断</h1><p>更新包为什么下不下来，这肯定是有原因的。对手机的网络请求进行抓包，应该可以查明原因。</p><p>如何对手机进行抓包，可以参见之前的博文“<a href="http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/">移动应用无线抓包指南</a>”。<br>如果手机使用的是家里的wifi网络，那对手机进行抓包会非常easy。两步即可：<br>    1. 在电脑上对fiddle进行设置<br>    2. 修改手机上的网络设置，设置代理，其中代理服务器的ip就是电脑的ip</p><blockquote><p>如何设置可参见博文<a href="http://jqlblue.github.io/2013/08/04/guide-of-packet-mobile-capture/">移动应用无线抓包指南</a>”</p></blockquote><p>设置完成后，再请求时发现更新包的无法下载。</p><img src="/images/mobile/android-4.4.3-update.png" class="" title="android-4.4.3-update"><p>这时有两种方案：<br>    1. 通过代理等途径，获取更新包域名的对应的ip，绑定host。<br>    2. 因为已经抓包获取到了更新包的下载地址，可以通过代理等途径，下载更新包并手动刷入。</p><blockquote><p>因为在手机上设置的代理服务器是电脑的ip，所以只要在电脑上绑定host，手机上也会生效。</p></blockquote><p>由于更新包下载地址的域名是动态的，所以没法绑定host。于是只有选择下载更新包，手动刷入。</p><h1 id="下载4-4-3-OTA-更新号"><a href="#下载4-4-3-OTA-更新号" class="headerlink" title="下载4.4.3 OTA 更新号"></a>下载4.4.3 OTA 更新号</h1><p>为了方便，已下载针对nexus4的android4.4.3的ota更新包。需要的，可直接通过如下地址下载<a href="http://pan.baidu.com/s/1mgjxxLA#dir/path=%2Fsoft%2Fandroid-4.4.3-update%2Fkitkat-4.4.3-update">android-4.4.3-ota</a>。</p><h1 id="使用adb手动刷入OTA更新包"><a href="#使用adb手动刷入OTA更新包" class="headerlink" title="使用adb手动刷入OTA更新包"></a>使用adb手动刷入OTA更新包</h1><h2 id="手动刷入的准备工作"><a href="#手动刷入的准备工作" class="headerlink" title="手动刷入的准备工作"></a>手动刷入的准备工作</h2><p>在手动刷入更新包时，除了下载更新包，还需要做如下准备工作：</p><ul><li>在手机的<code>开发者选项</code>中，开启<code>USB调试</code>。</li></ul><blockquote><p>在<code>设置</code>，<code>关于手机</code>中，狂点<code>版本号</code>，可开启<code>开发者选项</code>。</p></blockquote><ul><li>在电脑上使用usb线连接手机</li></ul><p>手机上应该会出现如下画面。选择<code>允许</code></p><img src="/images/mobile/android-usb-debug.png" class="" title="安卓usb调试"><p>使用usb连接手机后，电脑上可能会自动安装相关驱动程序，请耐心等待完成。</p><ul><li>下载adb</li></ul><p><code>adb</code>包含在android的sdk中，但是我们只需要<code>adb.exe</code>, <code>AdbWinApi.dll</code>, <code>AdbWinUsbApi.dll</code>。</p><p>如果不想去下载android的sdk，可以通过如下地址下载<a href="http://pan.baidu.com/s/1mgjxxLA#dir/path=%2Fsoft%2Fandroid-4.4.3-update%2Fadb">刷机adb</a>。</p><p>下载完成后，解压到某个目录，如<code>D:\soft\nexus4\Tools</code>，在命令行执行：<br>    cd D:\soft\nexus4\Tools<br>    d:<br>    adb.exe devices</p><p>如果看到下图，说明准备工作告一段落。如果没有，可能是相关驱动安装地有问题，可自行查阅解决。</p><img src="/images/mobile/android-adb-devices.png" class="" title="安卓adb devices"><h2 id="开刷"><a href="#开刷" class="headerlink" title="开刷"></a>开刷</h2><ul><li>关机，然后按住<code>音量下键</code>和<code>电源键</code>，进入fastboot模式：</li></ul><img src="/images/mobile/android-fastboot.png" class="" title="安卓fastboot"><ul><li>通过按<code>音量上下键</code>进行切换，切换到<code>Recovery Mode</code>模式，按<code>电源键</code>选择进入：</li></ul><img src="/images/mobile/android-recovery-mode.png" class="" title="安卓recovery-mode"><p>此时，你可以看到一个倒地的机器人：</p><img src="/images/mobile/android-recovery-mode-2.png" class="" title="安卓recovery-mode"><ul><li>按<code>电源键</code>，然后再迅速按<code>音量上键</code></li></ul><blockquote><p>这一步比较艰难，需要多尝试几次</p></blockquote><p>直到看到如下界面：</p><img src="/images/mobile/android-apply-update.png" class="" title="安卓adb update"><p>再按<code>音量上下键</code>进行切换，切换到<code>apply update from ADB</code>，按<code>电源键</code>选择进入：</p><img src="/images/mobile/android-sideload.png" class="" title="安卓sideload"><ul><li>通过USB再次连接电脑和手机</li></ul><p>在命令行执行：<br>    adb.exe sideload kitkat-4.4.3.zip</p><img src="/images/mobile/android-adb-sideload.png" class="" title="安卓 adb sideload"><p>手机上将会出现如下界面：</p><img src="/images/mobile/android-update-ota-1.png" class="" title="安卓 ota update"><p>耐心等待，等ota更新包安装完成时，会出现如下界面，按<code>电源键</code>选择重启即可。</p><img src="/images/mobile/android-update-ota-2.png" class="" title="安卓 ota update"><p>重启后，会对已安装的应用进行优化。通过<code>设置</code>，<code>关于手机</code>查看系统版本，发现已经是<code>4.4.3</code>。</p><img src="/images/mobile/android-4.4.3-update-end.jpg" class="" title="安卓 ota 更新完成">]]></content>
    
    
    <summary type="html">下载安卓4.4.3 ota更新包，通过adb手动更新到最新的安卓系统</summary>
    
    
    
    <category term="mobile" scheme="https://blog.gaoyuan.xyz/categories/mobile/"/>
    
    
    <category term="mobile" scheme="https://blog.gaoyuan.xyz/tags/mobile/"/>
    
  </entry>
  
  <entry>
    <title>再话tcpcopy的胞弟gryphon</title>
    <link href="https://blog.gaoyuan.xyz/2014/05/28/tcpcopy-gryphon-introduction/"/>
    <id>https://blog.gaoyuan.xyz/2014/05/28/tcpcopy-gryphon-introduction/</id>
    <published>2014-05-28T07:57:00.000Z</published>
    <updated>2025-06-09T23:54:02.601Z</updated>
    
    <content type="html"><![CDATA[<p>gryphon是由网易研发，能够模拟千万级别并发用户进行压力测试的一个软件，可用于网络消息推送服务方面的压力测试和传统web服务的压力测试。目前由网易的 <a href="http://weibo.com/tcpcopy">王斌</a>进行维护。更多介绍可参见<a href="https://github.com/wangbin579/gryphon">A powerful tool to simulate millions of concurrent users for loading testing</a></p><span id="more"></span><p>gryphon的安装和使用方法分为<code>传统架构方式</code>和<code>高级架构方式</code>。</p><h1 id="相关角色说明"><a href="#相关角色说明" class="headerlink" title="相关角色说明"></a>相关角色说明</h1><ul><li>gryphon客户端（&#x2F;usr&#x2F;local&#x2F;bin&#x2F;gryphon）</li><li>intercept拦截进程（&#x2F;usr&#x2F;local&#x2F;bin&#x2F;intercept）</li></ul><p>测试时，gryphon客户端读取录制的pcap文件（可以通过tcpdump产生），通过<code>Raw Socket</code>修改请求并发送到测试机。因为这些请求的来源ip可能是模拟的，为了连接的正常关闭，需要拦截测试机的响应包。</p><pre><code>在传统架构下：1 netfilter-iptables在协议栈将数据包交给内核中的ip_queue模块2 intercept在用户态通过netlink socket接收内核传来的数据报文3 将处理后的报文以及对报文的处理意见（ACCEPT，DROP等）传递给内核协议栈</code></pre><figure class="highlight c"><figcaption><span>communication/tc_socket.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tc_raw_socket_out_init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> fd, n;</span><br><span class="line"></span><br><span class="line">    n = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * On Linux when setting the protocol as IPPROTO_RAW,</span></span><br><span class="line"><span class="comment">     * then by default the kernel sets the IP_HDRINCL option and</span></span><br><span class="line"><span class="comment">     * thus does not prepend its own IP header.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    fd = socket(AF_INET, SOCK_RAW, IPPROTO_RAW);</span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>communication/tc_interception.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">tc_nl_event_process(<span class="type">tc_event_t</span> *rev)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span>            buffer[<span class="number">65536</span>];</span><br><span class="line">    <span class="keyword">register</span> <span class="type">int</span>    i, pass_through_flag = <span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span>   packet_id;</span><br><span class="line">    <span class="type">tc_ip_header_t</span> *ip_hdr;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (tc_nl_socket_recv(rev-&gt;fd, buffer, <span class="number">65536</span>) == TC_ERROR)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> TC_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ip_hdr = tc_nl_ip_header(buffer);</span><br><span class="line">    packet_id = tc_nl_packet_id(buffer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ip_hdr != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">/* check if it is the valid user to pass through firewall */</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; srv_settings.passed_ips.num; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (srv_settings.passed_ips.ips[i] == ip_hdr-&gt;daddr) &#123;</span><br><span class="line">                pass_through_flag = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tot_resp_packs++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pass_through_flag) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* pass through the firewall */</span></span><br><span class="line">            dispose_netlink_packet(rev-&gt;fd, NF_ACCEPT, packet_id);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            tot_copy_resp_packs++;</span><br><span class="line">            router_update(srv_settings.old, ip_hdr);</span><br><span class="line">            <span class="comment">/* drop the packet */</span></span><br><span class="line">            dispose_netlink_packet(rev-&gt;fd, NF_DROP, packet_id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TC_OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><pre><code>在高级架构下，是通过在测试机上配置静态路由规则，将响应路由到辅助服务器进行处理。</code></pre><img src="/images/gryphon/raw_socket.jpg" class="" title="raw socket"><h1 id="传统架构下安装并使用"><a href="#传统架构下安装并使用" class="headerlink" title="传统架构下安装并使用"></a>传统架构下安装并使用</h1><p>在传统架构下，<code>intercept拦截进程</code>需要运行在测试机上，用于拦截测试机的响应包。</p><h2 id="安装与使用"><a href="#安装与使用" class="headerlink" title="安装与使用"></a>安装与使用</h2><h3 id="在测试机安装intercept拦截进程"><a href="#在测试机安装intercept拦截进程" class="headerlink" title="在测试机安装intercept拦截进程"></a>在测试机安装intercept拦截进程</h3><pre><code>git clone git://github.com/wangbin579/tcpcopy.gitcd tcpcopysh autogen.sh./configure --prefix=/usr/local/tcocopy --enable-singlemakesudo make install</code></pre><h3 id="安装gryphon客户端"><a href="#安装gryphon客户端" class="headerlink" title="安装gryphon客户端"></a>安装gryphon客户端</h3><pre><code>git clone git://github.com/wangbin579/gryphon.gitcd gryphonsh autogen.sh./configure --prefix=/usr/local/gryphon --enable-singlemakesudo make install</code></pre><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>以<code>intercept拦截进程</code>安装在测试机<strong>10.16.15.118</strong>，应用端口是<strong>80</strong>，<code>gryphon客户端</code>安装在<strong>10.16.15.117</strong>为例，说明gryphon在传统架构下的基本使用方法。</p><ul><li>tcpdump抓包录制pcap文件</li></ul><p>可以在线上服务器抓包录制，并拷贝到<code>gryphon客户端</code>所在的服务器<strong>10.16.15.117</strong></p><pre><code>tcpdump -i eth0 port 80 -s 0 -w xxx.pcap</code></pre><ul><li>拦截响应包</li></ul><p>在测试机<strong>10.16.15.118</strong>上操作<br>    modprobe ip_queue<br>    iptables -I OUTPUT -p tcp –sport 80 -j QUEUE<br>    &#x2F;usr&#x2F;local&#x2F;tcpcopy&#x2F;bin&#x2F;intercept</p><blockquote><p>如果内核版本3.5，可以使用nfqueue</p></blockquote><ul><li>发送测试请求</li></ul><p>在<code>gryphon客户端</code>所在服务器<strong>10.16.15.117</strong>上操作<br>    &#x2F;usr&#x2F;local&#x2F;gryphon&#x2F;bin&#x2F;gryphon -x 80-10.16.15.118:80 -f .&#x2F;xxx.pcap -s 10.16.15.118 -u 1000 -a 2 -c 10.17.15.*</p><p>上述命令，从xxx.pcap抓包文件中提取出访问80端口的用户会话过程，模拟1000个用户，将请求复制到测试机<strong>10.16.15.118</strong>的<strong>80</strong>端口中去。其中用户ip地址的范围是10.17.15.*。</p><blockquote><p>-a参数用于加快数据包的发送速度。-a 2代表将数据包之间的发送间隔缩短一半，相当于加速2倍。也可和－i配合，如 －a 10 －i 2048</p></blockquote><p>gryphon拦截进程中各个基本参数的释义如下：<br>    gryphon -x historyServerPort-targetServerIP:targetServerPort -f &lt;pcapfile,&gt; -s <intercept address> -u <user num> -c &lt;ip range,&gt;</p><h2 id="调试步骤"><a href="#调试步骤" class="headerlink" title="调试步骤"></a>调试步骤</h2><p><code>gryphon客户端</code>和<code>intercept拦截进程</code>运行时，会在当前工作目录生成<code>error_gryphon.log</code>，<code>error_intercept.log</code>日志文件，里面有相关运行信息。当测试过程不能正常工作时，可优先查看相关日志。</p><p>其次就是在测试机或者<code>gryphon客户端</code>所在的服务器上进行抓包。确保<code>gryphon客户端</code>发出请求，并且没有收到测试机的响应包，如：</p><img src="/images/gryphon/gryphon_tcpdump.png" class="" title="gryphon tcpdump"><h1 id="高级架构下安装并使用"><a href="#高级架构下安装并使用" class="headerlink" title="高级架构下安装并使用"></a>高级架构下安装并使用</h1><p>在高级架构下，<code>intercept拦截进程</code>需要运行在辅助服务上，用于拦截测试机的响应包。</p><h2 id="安装与使用-1"><a href="#安装与使用-1" class="headerlink" title="安装与使用"></a>安装与使用</h2><h3 id="在测试机安装intercept拦截进程-1"><a href="#在测试机安装intercept拦截进程-1" class="headerlink" title="在测试机安装intercept拦截进程"></a>在测试机安装intercept拦截进程</h3><pre><code>git clone git://github.com/wangbin579/tcpcopy.gitcd tcpcopysh autogen.sh./configure --prefix=/usr/local/adv-tcpcopy --enable-single  --enable-pcap --enable-advancedmakesudo make install</code></pre><h3 id="安装gryphon客户端-1"><a href="#安装gryphon客户端-1" class="headerlink" title="安装gryphon客户端"></a>安装gryphon客户端</h3><pre><code>git clone git://github.com/wangbin579/gryphon.gitcd gryphonsh autogen.sh./configure --prefix=/usr/local/adv-gryphon --enable-single --enable-advancedmakesudo make install</code></pre><h3 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h3><p>以<code>intercept拦截进程</code>安装在辅助服务器<strong>10.16.15.116</strong>，<code>gryphon客户端</code>安装在<strong>10.16.15.117</strong>，测试机<strong>10.16.15.118</strong>的应用端口是<strong>80</strong>为例，说明gryphon在高级架构下的使用方法。</p><ul><li>tcpdump抓包录制pcap文件</li></ul><p>可以在线上服务器抓包录制，并拷贝到<code>gryphon客户端</code>所在的服务器<strong>10.16.15.117</strong></p><pre><code>tcpdump -i eth0 port 80 -s 0 -w xxx.pcap</code></pre><ul><li>拦截响应包</li></ul><p>在测试机<strong>10.16.15.118</strong>上设置静态路由，将响应包路由到辅助服务器<strong>10.16.15.116</strong><br>    route add -net 10.17.15.0 netmask 255.255.255.0 gw 10.16.15.116</p><p>查看是否设置成功<br>    $ route<br>    Kernel IP routing table<br>    Destination     Gateway         Genmask         Flags Metric Ref    Use Iface<br>    10.17.15.0      10.16.15.116    255.255.255.0   UG    0      0        0 eth0<br>    10.16.14.0      *               255.255.254.0   U     0      0        0 eth0<br>    169.254.0.0     *               255.255.0.0     U     0      0        0 eth0<br>    default         10.16.14.1      0.0.0.0         UG    0      0        0 eth0</p><p>如果设置错了，可以删除并重新添加<br>    route del -net 10.17.15.0 netmask 255.255.255.0</p><p>在辅助服务器<strong>10.16.15.116</strong>上启动intercept拦截进程<br>    &#x2F;usr&#x2F;local&#x2F;adv-tcpcopy&#x2F;bin&#x2F;intercept -F ‘tcp and src port 80’</p><ul><li>发送测试请求</li></ul><p>在<code>gryphon客户端</code>所在服务器<strong>10.16.15.117</strong>上操作<br>    &#x2F;usr&#x2F;local&#x2F;adv-gryphon&#x2F;bin&#x2F;gryphon -x 80-10.16.15.118:80 -f .&#x2F;xxx.pcap -s 10.16.15.116 -u 1000 -c 10.17.15.*</p><p>** Reference **</p><p>[^1] <a href="http://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html">http://www.ibm.com/developerworks/cn/linux/l-ntflt/index.html</a></p><p>[^2] <a href="http://www.ibm.com/developerworks/cn/linux/l-netlink/index.html">http://www.ibm.com/developerworks/cn/linux/l-netlink/index.html</a></p><p>[^3] <a href="http://www.tenouk.com/Module42a.html">http://www.tenouk.com/Module42a.html</a></p><p>[^4] <a href="http://blog.csdn.net/u010807313/article/details/9236581">http://blog.csdn.net/u010807313/article/details/9236581</a></p>]]></content>
    
    
    <summary type="html">tcpcopy的胞弟gryphon的介绍，安装，测试和使用</summary>
    
    
    
    <category term="devops" scheme="https://blog.gaoyuan.xyz/categories/devops/"/>
    
    
    <category term="devops, linux" scheme="https://blog.gaoyuan.xyz/tags/devops-linux/"/>
    
  </entry>
  
  <entry>
    <title>一个使用curl请求https资源的问题排查</title>
    <link href="https://blog.gaoyuan.xyz/2014/05/14/a-trouble-in-request-https-in-curl/"/>
    <id>https://blog.gaoyuan.xyz/2014/05/14/a-trouble-in-request-https-in-curl/</id>
    <published>2014-05-14T06:50:00.000Z</published>
    <updated>2025-06-09T23:54:02.601Z</updated>
    
    <content type="html"><![CDATA[<p>昨天临下班前，应客户端大牛的要求，开发了一个返回下载服务器ip列表的接口，用于在客户端指定host以解决用户下载时遭遇运营商dns劫持的问题。</p><p>开发时略微有少许忐忑，但测试时一切顺利，于是就轻松地回家了。</p><span id="more"></span><p>早上一上线代码，就收到了通过<code>sentry</code>发出的报警邮件。原以为是缓存没有及时更新的问题，立马手动进行更新。但还是没有通过接口获取到相关ip。随即回滚代码，重新上线。</p><h1 id="排查过程"><a href="#排查过程" class="headerlink" title="排查过程"></a>排查过程</h1><p>后来下线一台服务器进行调试时发现，在调用ops提供的接口获取ip列表时没有获取到返回数据，而相关接口是<code>https</code>的。</p><p>再跟踪请求资源的函数发现，相关函数没有对<code>https</code>请求做特殊处理。相关函数实现如下：</p><pre><code>public static function get($url, array $headers = array(), $timeout = 5)&#123;    $ch = curl_init();    curl_setopt($ch, CURLOPT_URL, $url);    if ($headers) &#123;        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);    &#125;    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);    curl_setopt($ch, CURLOPT_TIMEOUT, $timeout);    curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);    $content = curl_exec($ch);    $response = curl_getinfo($ch);    curl_close($ch);    if ($response[&#39;http_code&#39;] == 200) &#123;        return $content;    &#125;    return null;&#125;</code></pre><p>这或许就是昨天那少许忐忑的缘由。于是增加如下代码，测试通过后重新上线。</p><pre><code>    if (substr($url, 0, 5) == &#39;https&#39;) &#123;        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);    &#125;</code></pre><h1 id="进一步排查"><a href="#进一步排查" class="headerlink" title="进一步排查"></a>进一步排查</h1><p>线上的问题虽然暂时解决了，但是在问题解决之前，测试机上是正常的，这是为什么呢？</p><h2 id="在命令行运行curl排查问题"><a href="#在命令行运行curl排查问题" class="headerlink" title="在命令行运行curl排查问题"></a>在命令行运行curl排查问题</h2><p>在命令行使用curl请求ops的接口，其中线上服务器的运行结果如下：</p><pre><code>$ curl &#39;https://x.x.x.x/get_ips&#39;curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failedMore details here: http://curl.haxx.se/docs/sslcerts.html</code></pre><p>测试机上可以正常获取到结果。</p><p>然后分别查看curl的版本和curl使用的动态连接库，都没有发现差异<br>    $ &#x2F;usr&#x2F;bin&#x2F;curl -V<br>    $ type curl</p><pre><code>/usr/bin/curl$ ldd /usr/bin/curl</code></pre><p>再查看上面的错误，发现可能是<code>https</code>证书的问题。于是添加<code>--verbose</code>参数，再次使用curl进行请求，以获取更多交互信息。</p><p>截取部分输出如下</p><pre><code>$ curl &#39;https://x.x.x.x/get_ips&#39; --verbose* About to connect() to x.x.x.x port 80*   Trying x.x.x.x... connected* Connected to x.x.x.x (x.x.x.x) port 80* successfully set certificate verify locations:*   CAfile: /etc/pki/tls/certs/ca-bundle.crtCApath: none* SSLv2, Client hello (1):SSLv3, TLS handshake, Server hello (2):SSLv3, TLS handshake, CERT (11):SSLv3, TLS alert, Server hello (2):SSL certificate problem, verify that the CA cert is OK. Details:error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed* Closing connection #0curl: (60) SSL certificate problem, verify that the CA cert is OK. Details:error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failedMore details here: http://curl.haxx.se/docs/sslcerts.html</code></pre><p>可见使用的证书的是<code>/etc/pki/tls/certs/ca-bundle.crt</code>。</p><p>使用测试机上的证书替换线上服务器的证书后，问题解决。</p><blockquote><p>如果没有可用的证书，可以使用如下方法：</p></blockquote><pre><code>$ curl http://curl.haxx.se/ca/cacert.pem -o /etc/pki/tls/certs/ca-bundle.crt</code></pre><h1 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h1><p>在请求https的资源时，遇到证书不匹配的问题，一般的工具都有不进行https证书验证的选项，比如：</p><pre><code>$ wget &#39;https://x.x.x.x/get_ips&#39; --no-check-certificate$ curl &#39;https://x.x.x.x/get_ips&#39; -k</code></pre><p>当然，也可以在请求时指定证书，或者对使用的https ca证书进行更新。</p><p>reference:<br>[^1] <a href="http://curl.haxx.se/docs/sslcerts.html">http://curl.haxx.se/docs/sslcerts.html</a></p>]]></content>
    
    
    <summary type="html">排查在linux环境下，在某些服务器上，使用curl请求https资源发生证书验证失败的问题</summary>
    
    
    
    <category term="php" scheme="https://blog.gaoyuan.xyz/categories/php/"/>
    
    
    <category term="linux" scheme="https://blog.gaoyuan.xyz/tags/linux/"/>
    
    <category term="php" scheme="https://blog.gaoyuan.xyz/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php中的单例模式面面观</title>
    <link href="https://blog.gaoyuan.xyz/2014/04/26/singleton-pattern-in-php/"/>
    <id>https://blog.gaoyuan.xyz/2014/04/26/singleton-pattern-in-php/</id>
    <published>2014-04-26T12:47:00.000Z</published>
    <updated>2025-06-09T23:54:02.601Z</updated>
    
    <content type="html"><![CDATA[<p>最近在面试时发现好多人都喜欢在简历中添加“熟悉各种设计模式”那一项。但也不乏对于最为简单的单例，也仅限于书本上的一点认知，所以扯一扯php中单例模式的几种使用场景。</p><span id="more"></span><h1 id="何为单例模式"><a href="#何为单例模式" class="headerlink" title="何为单例模式"></a>何为单例模式</h1><p>单例模式属于创建型的应用模式，可以确保某一个类只有一个实例。这在获取数据库，缓存服务器的连接句柄，以及获取配置信息方面非常方便。</p><p>使用单例模式，可以减少在一次web请求中多次连接数据库或者解析配置文件等操作对系统资源的消耗，也可以避免大量的new操作。</p><p>其UML结构图如下：</p><img src="/images/pattern/singleton-uml.png" class="" title="singleton-uml"><p>在php中实现单例模式需要注意：</p><ul><li>需要一个静态变量保存实例</li><li>需要提供一个公共的静态方法，用于返回需要获取的实例</li><li>需要防止外部程序通过new和clone等操作产生相关实例，从而失去单例模式的意义</li></ul><h1 id="代码实现解析"><a href="#代码实现解析" class="headerlink" title="代码实现解析"></a>代码实现解析</h1><p>一个单例模式的php实现大致如下:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$_instance</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;clone method is not allowed.&quot;</span>, E_USER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">self</span>::<span class="variable">$_instance</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$_instance</span> = <span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$_instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码通过<code>静态成员变量</code>保存创建的实例，通过将构造函数设置为私有的，并使用魔术方法<code>__clone</code>“重载”clone方法以避免通过外部程序获取相关实例。</p><p>由于php中的静态变量包括：<code>静态全局变量</code>，<code>静态局部变量</code>，<code>静态成员变量</code>，所以也可以通过<code>静态局部变量</code>来保存创建的实例。但是在子类中获取创建的实例时，会遇到一些问题。示例如下：</p><h2 id="使用静态局部变量"><a href="#使用静态局部变量" class="headerlink" title="使用静态局部变量"></a>使用静态局部变量</h2><figure class="highlight php"><figcaption><span>singleton-static.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_handle</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_handle = <span class="keyword">new</span> <span class="title class_">StdClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;clone method is not allowed.&quot;</span>, E_USER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">static</span> <span class="variable">$_instance</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$_instance</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable">$_instance</span> = <span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$_instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObj</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;_handle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="built_in">self</span>::<span class="title function_ invoke__">getInstance</span>()-&gt;<span class="title function_ invoke__">getObj</span>());</span><br><span class="line">        <span class="comment">//logic no care</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupModel</span> <span class="keyword">extends</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getGroup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="built_in">self</span>::<span class="title function_ invoke__">getInstance</span>()-&gt;<span class="title function_ invoke__">getObj</span>());</span><br><span class="line">        <span class="comment">//logic no care</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">UserModel</span>::<span class="title function_ invoke__">getUser</span>();</span><br><span class="line"><span class="title class_">GroupModel</span>::<span class="title function_ invoke__">getGroup</span>();</span><br></pre></td></tr></table></figure><pre><code>$ php /.singleton-static.phpobject(Singleton)#2 (0) &#123;&#125;object(Singleton)#4 (0) &#123;&#125;</code></pre><blockquote><p>此例没有获取到唯一实例，因为局部静态变量，也就是在函数中定义的静态变量。其信息是存储在zend vm为每个函数分配的一个私有符号表中。</p></blockquote><p>php中当继承发生时，会进行函数的合并。UserModel中调用的，实际上是合并在UserModel中的getInstance，GroupModel中调用的，也是合并在GroupModel中的getInstance方法。</p><p>因为是在两个不同方法的私有符号表中获取数据，所以取到的不是同一个实例。</p><blockquote><p>可以将self换成parent试试</p></blockquote><h2 id="使用静态成员变量"><a href="#使用静态成员变量" class="headerlink" title="使用静态成员变量"></a>使用静态成员变量</h2><figure class="highlight php"><figcaption><span>singleton-static-member.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_handle</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$_instance</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_handle = <span class="keyword">new</span> <span class="title class_">StdClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;clone method is not allowed.&quot;</span>, E_USER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">self</span>::<span class="variable">$_instance</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$_instance</span> = <span class="keyword">new</span> <span class="built_in">self</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$_instance</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getObj</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;_handle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserModel</span> <span class="keyword">extends</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="built_in">self</span>::<span class="title function_ invoke__">getInstance</span>()-&gt;<span class="title function_ invoke__">getObj</span>());</span><br><span class="line">        <span class="comment">//logic no care</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GroupModel</span> <span class="keyword">extends</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getGroup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="built_in">self</span>::<span class="title function_ invoke__">getInstance</span>()-&gt;<span class="title function_ invoke__">getObj</span>());</span><br><span class="line">        <span class="comment">//logic no care</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">UserModel</span>::<span class="title function_ invoke__">getUser</span>();</span><br><span class="line"><span class="title class_">GroupModel</span>::<span class="title function_ invoke__">getGroup</span>();</span><br></pre></td></tr></table></figure><pre><code>$ php /.singleton-static-member.phpobject(Singleton)#2 (0) &#123;&#125;object(Singleton)#2 (0) &#123;&#125;</code></pre><blockquote><p>此时获取到了唯一实例，因为静态成员变量的信息是存储在类结构的 default_static_members 字段，为所有实例所共用。</p></blockquote><h1 id="编写一个单例的基类"><a href="#编写一个单例的基类" class="headerlink" title="编写一个单例的基类"></a>编写一个单例的基类</h1><p>有时我们的项目中有个缓存类，还有数据库类，还有个文件操作类。想让这三个类都是单例的话，我们需要实现三个单例，这有点繁琐。于是我们可以创建一个单例的基类，要实现单例的类继承这个基类即可。直接上代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">static</span> <span class="variable">$_instances</span> = <span class="keyword">array</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;clone method is not allowed.&quot;</span>, E_USER_ERROR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$c</span> = <span class="title function_ invoke__">get_called_class</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="built_in">self</span>::<span class="variable">$_instances</span>[<span class="variable">$c</span>])) &#123;</span><br><span class="line">            <span class="built_in">self</span>::<span class="variable">$_instances</span>[<span class="variable">$c</span>] = <span class="keyword">new</span> <span class="variable">$c</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">self</span>::<span class="variable">$_instances</span>[<span class="variable">$c</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cache</span> <span class="title">Extends</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_handle</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_handle = <span class="keyword">new</span> <span class="title class_">StdClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHandle</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;_handle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Db</span> <span class="title">Extends</span> <span class="title">Singleton</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_handle</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">_connect</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">_connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_handle = <span class="keyword">new</span> <span class="title class_">StdClass</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getHandle</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;_handle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>reference：</p><p>[^1] <a href="http://www.php-internals.com/book/?p=chapt05/05-04-class-inherit-abstract">http://www.php-internals.com/book/?p=chapt05/05-04-class-inherit-abstract</a></p><p>[^2] <a href="http://zh.wikipedia.org/zh/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">http://zh.wikipedia.org/zh/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F</a></p><p>[^3] <a href="http://www.phptherightway.com/pages/Design-Patterns.html">http://www.phptherightway.com/pages/Design-Patterns.html</a></p><p>[^4] <a href="http://rancoud.com/read-phps-opcode/">http://rancoud.com/read-phps-opcode/</a></p>]]></content>
    
    
    <summary type="html">php语言中单例设计模式的几种使用场景，静态局部变量，静态成员变量</summary>
    
    
    
    <category term="php" scheme="https://blog.gaoyuan.xyz/categories/php/"/>
    
    
    <category term="php" scheme="https://blog.gaoyuan.xyz/tags/php/"/>
    
    <category term="pattren" scheme="https://blog.gaoyuan.xyz/tags/pattren/"/>
    
  </entry>
  
</feed>
